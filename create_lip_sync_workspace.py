#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé¨ CREATE LIP SYNC WORKSPACE
–°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–ø—Å–∏–Ω–∫–æ–º
"""

import os
import shutil
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - üé¨ %(message)s')

class LipSyncWorkspaceCreator:
    """üé¨ –°–æ–∑–¥–∞—Ç–µ–ª—å —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞"""
    
    def __init__(self):
        self.base_dir = Path(".")
        self.workspace_dir = self.base_dir / "LIP_SYNC_FINAL"
        self.logger = logging.getLogger("LipSyncWorkspace")
        
        # –¢—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏
        self.photos_dir = self.workspace_dir / "01_PHOTOS"
        self.audio_dir = self.workspace_dir / "02_AUDIO_TRACKS"  
        self.videos_dir = self.workspace_dir / "03_READY_VIDEOS"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        for dir_path in [self.photos_dir, self.audio_dir, self.videos_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def collect_all_photos(self):
        """üì∏ –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        self.logger.info("–°–æ–±–∏—Ä–∞—é –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        
        photo_sources = [
            Path("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"),
            Path("upscaled_images"),
            Path("ORGANIZED_LIP_SYNC/PHOTOS"),
            Path("LIP_SYNC_WORKSPACE/input_photos")
        ]
        
        collected = 0
        for source in photo_sources:
            if source.exists():
                self.logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é: {source}")
                
                # –ò—â–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–æ—Ç–æ
                for ext in ['*.jpg', '*.jpeg', '*.png', '*.webp', '*.bmp']:
                    for photo in source.glob(ext):
                        if photo.stat().st_size > 50000:  # –ë–æ–ª—å—à–µ 50KB
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è
                            new_name = f"photo_{collected+1:03d}_{photo.stem}.{photo.suffix[1:]}"
                            dest = self.photos_dir / new_name
                            
                            # –ö–æ–ø–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
                            if not dest.exists():
                                shutil.copy2(photo, dest)
                                collected += 1
                                
                                if collected % 10 == 0:
                                    self.logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {collected} —Ñ–æ—Ç–æ...")
        
        self.logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {collected} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ {self.photos_dir}")
        return collected
    
    def collect_all_audio(self):
        """üéµ –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏"""
        self.logger.info("–°–æ–±–∏—Ä–∞—é –≤—Å–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏...")
        
        audio_sources = [
            Path("rap_10sec_segments"),
            Path("—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π"),
            Path("ORGANIZED_LIP_SYNC/AUDIO_SEGMENTS"),
            Path("LIP_SYNC_WORKSPACE/input_audio")
        ]
        
        collected = 0
        for source in audio_sources:
            if source.exists():
                self.logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é: {source}")
                
                # –ò—â–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞—É–¥–∏–æ
                for ext in ['*.wav', '*.mp3', '*.m4a', '*.aac']:
                    for audio in source.glob(ext):
                        if audio.stat().st_size > 30000:  # –ë–æ–ª—å—à–µ 30KB
                            # –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è
                            new_name = f"track_{collected+1:03d}_{audio.stem}.{audio.suffix[1:]}"
                            dest = self.audio_dir / new_name
                            
                            # –ö–æ–ø–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
                            if not dest.exists():
                                shutil.copy2(audio, dest)
                                collected += 1
                                
                                if collected % 5 == 0:
                                    self.logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {collected} —Ç—Ä–µ–∫–æ–≤...")
        
        self.logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {collected} –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤ –≤ {self.audio_dir}")
        return collected
    
    def create_instructions(self, photos_count, audio_count):
        """üìã –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã"""
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ
        photo_readme = self.photos_dir / "README.md"
        with open(photo_readme, 'w', encoding='utf-8') as f:
            f.write(f"""# üì∏ –§–û–¢–û–ì–†–ê–§–ò–ò –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê

## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- **–í—Å–µ–≥–æ —Ñ–æ—Ç–æ:** {photos_count}
- **–ì–æ—Ç–æ–≤—ã –¥–ª—è HeyGen:** ‚úÖ
- **–§–æ—Ä–º–∞—Ç—ã:** JPG, PNG, WEBP

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –í—ã–±–∏—Ä–∞–π—Ç–µ —Ñ–æ—Ç–æ —Å —á–µ—Ç–∫–∏–º –ª–∏—Ü–æ–º
- –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã—Ö/—Ä–∞–∑–º—ã—Ç—ã—Ö
- –õ—É—á—à–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞

## üéØ –î–õ–Ø HEYGEN:
1. –í—ã–±–µ—Ä–∏—Ç–µ 5-10 –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ
2. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä
3. –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
""")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ
        audio_readme = self.audio_dir / "README.md"
        with open(audio_readme, 'w', encoding='utf-8') as f:
            f.write(f"""# üéµ –ê–£–î–ò–û –¢–†–ï–ö–ò –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê

## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- **–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤:** {audio_count}
- **–ì–æ—Ç–æ–≤—ã –¥–ª—è HeyGen:** ‚úÖ
- **–§–æ—Ä–º–∞—Ç—ã:** WAV, MP3, M4A

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ —Ç—Ä–µ–∫–∏ 5-20 —Å–µ–∫—É–Ω–¥
- –ß–µ—Ç–∫–∞—è —Ä–µ—á—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ –º—É–∑—ã–∫–∏
- –í HeyGen –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–∏–ø "Speech"

## üéØ –î–õ–Ø HEYGEN:
1. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç—Ä–µ–∫–æ–≤ (5-10 —Å–µ–∫)
2. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞–∫ "Speech", –Ω–µ "Music"
3. –Ø–∑—ã–∫: English –¥–ª—è —Ä—ç–ø–∞
""")
        
        # –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        main_readme = self.workspace_dir / "START_HERE.md"
        with open(main_readme, 'w', encoding='utf-8') as f:
            f.write(f"""# üé¨ LIP SYNC WORKSPACE - –ù–ê–ß–ù–ò–¢–ï –ó–î–ï–°–¨!

## üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:

### üì∏ **01_PHOTOS** ({photos_count} —Ñ–æ—Ç–æ)
- –í—Å–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞
- –í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
- –ß–∏—Ç–∞–π—Ç–µ README.md –≤ –ø–∞–ø–∫–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π

### üéµ **02_AUDIO_TRACKS** ({audio_count} —Ç—Ä–µ–∫–æ–≤)
- –í—Å–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (5-20 —Å–µ–∫)
- –ß–∏—Ç–∞–π—Ç–µ README.md –≤ –ø–∞–ø–∫–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

### üé¨ **03_READY_VIDEOS** (–ø–æ–∫–∞ –ø—É—Å—Ç–æ)
- –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ –∏–∑ HeyGen
- –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –ø–æ –ø–∞–ø–∫–∞–º: test/, final/, best/

## üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:

### 1Ô∏è‚É£ **–¢–ï–°–¢–û–í–û–ï –í–ò–î–ï–û (5 –º–∏–Ω—É—Ç)**
1. –û—Ç–∫—Ä–æ–π—Ç–µ **app.heygen.com**
2. –í—ã–±–µ—Ä–∏—Ç–µ 1 —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ 01_PHOTOS
3. –í—ã–±–µ—Ä–∏—Ç–µ 1 –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—Ä–µ–∫ –∏–∑ 02_AUDIO_TRACKS
4. –°–æ–∑–¥–∞–π—Ç–µ –∞–≤–∞—Ç–∞—Ä ‚Üí Audio to Video
5. –ù–∞—Å—Ç—Ä–æ–π–∫–∏: HD, Speech, English
6. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ 03_READY_VIDEOS/test/

### 2Ô∏è‚É£ **–ú–ê–°–°–û–í–û–ï –ü–†–û–ò–ó–í–û–î–°–¢–í–û**
1. –°–æ–∑–¥–∞–π—Ç–µ 5-10 –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏–∑ –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ
2. –í—ã–±–µ—Ä–∏—Ç–µ 10-20 –ª—É—á—à–∏—Ö —Ç—Ä–µ–∫–æ–≤
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞–∫–µ—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
4. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ: 10 —Ñ–æ—Ç–æ √ó 20 —Ç—Ä–µ–∫–æ–≤ = 200 –≤–∏–¥–µ–æ!

## üí∞ **–≠–ö–û–ù–û–ú–ò–ö–ê:**
- **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ HeyGen:** ~$30/–º–µ—Å—è—Ü
- **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** 200+ –≤–∏–¥–µ–æ –∑–∞ –º–µ—Å—è—Ü
- **–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤–∏–¥–µ–æ:** $0.15
- **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** $50+ –∑–∞ –≤–∏–¥–µ–æ –≤—Ä—É—á–Ω—É—é
- **–≠–ö–û–ù–û–ú–ò–Ø:** 99%! üî•

## üéØ **–¶–ï–õ–¨:**
–°–æ–∑–¥–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–∑ {photos_count//10} √ó {audio_count//5} = {(photos_count//10) * (audio_count//5)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–ø—Å–∏–Ω–∫ –≤–∏–¥–µ–æ!

---

## üìû **–ü–û–î–î–ï–†–ñ–ö–ê:**
- –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã
- –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
- –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ!

**–£–î–ê–ß–ò –í –°–û–ó–î–ê–ù–ò–ò! üé¨‚ú®**
""")
        
        self.logger.info("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    
    def create_workspace(self):
        """üé¨ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"""
        
        self.logger.info("üé¨ –°–û–ó–î–ê–Æ –†–ê–ë–û–ß–ï–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê...")
        self.logger.info("=" * 60)
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        photos = self.collect_all_photos()
        audio = self.collect_all_audio()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        self.create_instructions(photos, audio)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ –≤ –≥–æ—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ
        (self.videos_dir / "test").mkdir(exist_ok=True)
        (self.videos_dir / "final").mkdir(exist_ok=True)
        (self.videos_dir / "best").mkdir(exist_ok=True)
        
        self.logger.info("=" * 60)
        self.logger.info("üéâ –†–ê–ë–û–ß–ï–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û –ì–û–¢–û–í–û!")
        self.logger.info(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos}")
        self.logger.info(f"üéµ –ê—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤: {audio}")
        self.logger.info(f"üé¨ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–∏–¥–µ–æ: {photos * audio}")
        self.logger.info(f"üìÅ –ü–∞–ø–∫–∞: {self.workspace_dir}")
        self.logger.info("üöÄ –ù–ê–ß–ò–ù–ê–ô–¢–ï –°–û–ó–î–ê–í–ê–¢–¨ –õ–ò–ü–°–ò–ù–ö!")
        
        return self.workspace_dir

def main():
    creator = LipSyncWorkspaceCreator()
    workspace_path = creator.create_workspace()
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
    import subprocess
    subprocess.run(["open", str(workspace_path)])
    
    print(f"\nüéØ –†–ê–ë–û–ß–ï–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û –û–¢–ö–†–´–¢–û: {workspace_path}")
    print("üìã –ß–∏—Ç–∞–π—Ç–µ START_HERE.md –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!")

if __name__ == "__main__":
    main() 