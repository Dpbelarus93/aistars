#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé§ RAP LIP SYNC MIXER
üé¨ –°–æ–∑–¥–∞–µ–º 20 –ª–∏–ø—Å–∏–Ω–∫ –≤–∏–¥–µ–æ: 10 —Ç—Ä–µ–∫–æ–≤ √ó 2 —Ñ–æ—Ç–æ = 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
üéµ –ú–∏–∫—Å –ª—É—á—à–∏—Ö –∫—É—Å–æ—á–∫–æ–≤ —Ä—ç–ø–∞ —Å –ª—É—á—à–∏–º–∏ —Ñ–æ—Ç–∫–∞–º–∏
"""

import os
import random
import shutil
from pathlib import Path
from typing import List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - üé§ [%(levelname)s] - %(message)s'
)

class RapLipSyncMixer:
    """üéµ –ú–∏–∫—Å-–º–∞—Å—Ç–µ—Ä –¥–ª—è —Ä—ç–ø –ª–∏–ø—Å–∏–Ω–∫–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger("RapLipSyncMixer")
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—É—Ç–∏
        self.base_dir = Path("—Ö–æ—á—É –µ—â–µ")
        
        # –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.workspace = self.base_dir / "LIP_SYNC_WORKSPACE"
        self.input_photos = self.workspace / "input_photos"
        self.input_audio = self.workspace / "input_audio"
        self.output_videos = self.workspace / "output_videos"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_path in [self.input_photos, self.input_audio, self.output_videos]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.photo_sources = [
            Path("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"),
            Path("upscaled_images")
        ]
        
        self.audio_sources = [
            Path(".."),  # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ - —Ç–∞–º rap_10sec_*.wav
            Path("../—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π")
        ]
        
        self.logger.info("üé§ Rap Lip Sync Mixer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def find_best_photos(self, count: int = 10) -> List[Path]:
        """üì∏ –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞"""
        
        self.logger.info(f"üì∏ –ò—â–µ–º {count} –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ...")
        
        all_photos = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
        for source in self.photo_sources:
            if source.exists():
                # JPG –∏–∑ –ø–∞–ø–∫–∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                if source.name == "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏":
                    photos = list(source.glob("*.jpg"))
                    # –û—Ç–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É (–±–æ–ª—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ)
                    photos.sort(key=lambda p: p.stat().st_size, reverse=True)
                    all_photos.extend(photos[:15])  # –¢–æ–ø 15 JPG
                
                # PNG –∏–∑ upscaled_images
                elif source.name == "upscaled_images":
                    photos = list(source.glob("*.png"))
                    # –ë–µ—Ä–µ–º –∫–∞–∂–¥–æ–µ 10-–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    selected_photos = photos[::10]
                    all_photos.extend(selected_photos[:15])  # –¢–æ–ø 15 PNG
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        random.shuffle(all_photos)
        selected = all_photos[:count]
        
        self.logger.info(f"üì∏ –û—Ç–æ–±—Ä–∞–Ω–æ {len(selected)} —Ñ–æ—Ç–æ")
        for i, photo in enumerate(selected, 1):
            self.logger.info(f"  {i}. {photo.name} ({photo.stat().st_size // 1024}KB)")
        
        return selected
    
    def find_best_audio(self, count: int = 10) -> List[Path]:
        """üéµ –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏"""
        
        self.logger.info(f"üéµ –ò—â–µ–º {count} –ª—É—á—à–∏—Ö —Ç—Ä–µ–∫–æ–≤...")
        
        all_audio = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ
        for source in self.audio_sources:
            if source.exists():
                # –û—Å–Ω–æ–≤–Ω—ã–µ 10-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Ç—Ä–µ–∫–∏
                if source == Path(".."):
                    tracks = list(source.glob("rap_10sec_*.wav"))
                    all_audio.extend(tracks)
                
                # 5-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
                elif source.name == "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π":
                    tracks = list(source.glob("rap_5sec_*.wav"))
                    # –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π 3-–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    selected_tracks = tracks[::3]
                    all_audio.extend(selected_tracks[:7])  # –¢–æ–ø 7 —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        random.shuffle(all_audio)
        selected = all_audio[:count]
        
        self.logger.info(f"üéµ –û—Ç–æ–±—Ä–∞–Ω–æ {len(selected)} —Ç—Ä–µ–∫–æ–≤")
        for i, track in enumerate(selected, 1):
            self.logger.info(f"  {i}. {track.name} ({track.stat().st_size // 1024}KB)")
        
        return selected
    
    def setup_workspace(self):
        """üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        
        self.logger.info("üõ†Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ...")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
        for file in self.input_photos.glob("*"):
            file.unlink()
        for file in self.input_audio.glob("*"):
            file.unlink()
        
        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        best_photos = self.find_best_photos(10)
        best_audio = self.find_best_audio(10)
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ
        copied_photos = 0
        for i, photo in enumerate(best_photos, 1):
            try:
                dest = self.input_photos / f"photo_{i:02d}_{photo.stem}.{photo.suffix[1:]}"
                shutil.copy2(photo, dest)
                copied_photos += 1
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ {photo.name}: {e}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        copied_audio = 0
        for i, audio in enumerate(best_audio, 1):
            try:
                dest = self.input_audio / f"track_{i:02d}_{audio.stem}.wav"
                shutil.copy2(audio, dest)
                copied_audio += 1
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ {audio.name}: {e}")
        
        self.logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {copied_photos} —Ñ–æ—Ç–æ, {copied_audio} —Ç—Ä–µ–∫–æ–≤")
        
        return {"photos": copied_photos, "audio": copied_audio}
    
    def generate_lip_sync_plan(self):
        """üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –ª–∏–ø—Å–∏–Ω–∫ –º–∏–∫—Å–æ–≤"""
        
        photos = sorted(list(self.input_photos.glob("*")))
        audios = sorted(list(self.input_audio.glob("*")))
        
        plan = []
        
        # –ö–∞–∂–¥—ã–π —Ç—Ä–µ–∫ —Å 2 —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ç–æ
        for i, audio in enumerate(audios, 1):
            # –í—ã–±–∏—Ä–∞–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞
            selected_photos = random.sample(photos, min(2, len(photos)))
            
            for j, photo in enumerate(selected_photos, 1):
                mix_name = f"mix_{i:02d}_{j:01d}_{audio.stem}_{photo.stem}"
                
                plan.append({
                    "name": mix_name,
                    "audio": audio,
                    "photo": photo,
                    "output": self.output_videos / f"{mix_name}.mp4"
                })
        
        self.logger.info(f"üìã –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(plan)} –ª–∏–ø—Å–∏–Ω–∫ –º–∏–∫—Å–æ–≤")
        
        return plan
    
    def create_mix_summary(self, plan):
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–∏–∫—Å–æ–≤"""
        
        summary = f"""
üé§ RAP LIP SYNC MIXER - –ü–õ–ê–ù –°–û–ó–î–ê–ù–ò–Ø
{'='*60}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
  ‚Ä¢ –í—Å–µ–≥–æ –º–∏–∫—Å–æ–≤: {len(plan)}
  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {len(set(mix['audio'].name for mix in plan))}
  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(set(mix['photo'].name for mix in plan))}

üéµ –¢–†–ï–ö–ò –í –†–ê–ë–û–¢–ï:"""
        
        unique_tracks = list(set(mix['audio'].name for mix in plan))
        for i, track in enumerate(unique_tracks, 1):
            summary += f"\n  {i:2d}. {track}"
        
        summary += f"""

üì∏ –§–û–¢–û –í –†–ê–ë–û–¢–ï:"""
        
        unique_photos = list(set(mix['photo'].name for mix in plan))
        for i, photo in enumerate(unique_photos, 1):
            summary += f"\n  {i:2d}. {photo}"
        
        summary += f"""

üé¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ü–õ–ê–ù:"""
        
        for i, mix in enumerate(plan, 1):
            summary += f"""
  {i:2d}. {mix['name']}
      üéµ {mix['audio'].name}
      üì∏ {mix['photo'].name}
      üìπ ‚Üí {mix['output'].name}"""
        
        return summary

def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé§" * 60)
    print("üéµ RAP LIP SYNC MIXER")
    print("üé¨ 10 —Ç—Ä–µ–∫–æ–≤ √ó 2 —Ñ–æ—Ç–æ = 20 –∫—Ä—É—Ç—ã—Ö –≤–∏–¥–µ–æ!")
    print("üé§" * 60)
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    mixer = RapLipSyncMixer()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ workspace
    print("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
    setup_result = mixer.setup_workspace()
    print(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {setup_result['photos']} —Ñ–æ—Ç–æ, {setup_result['audio']} —Ç—Ä–µ–∫–æ–≤")
    print()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–∫—Å–æ–≤...")
    plan = mixer.generate_lip_sync_plan()
    
    # –°–≤–æ–¥–∫–∞
    summary = mixer.create_mix_summary(plan)
    print(summary)
    print()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    plan_file = Path("—Ö–æ—á—É –µ—â–µ/rap_mix_plan.txt")
    with open(plan_file, 'w', encoding='utf-8') as f:
        f.write(summary)
    
    print(f"üìÑ –ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {plan_file}")
    print()
    
    print("üé¨ –ì–û–¢–û–í–û –ö –ó–ê–ü–£–°–ö–£ –õ–ò–ü–°–ò–ù–ö–ê!")
    print("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∑–∞–ø—É—Å—Ç–∏—Ç—å professional_lip_sync_automation.py")
    print("üé§" * 60)

if __name__ == "__main__":
    main() 