#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Mass 8K Upscaler –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ üöÄ
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–ø—Å–∫–µ–π–ª–∞ —Ñ–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –¥–æ 8K —Å —Å—É–ø–µ—Ä –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""

import os
import sys
import subprocess
from pathlib import Path
import datetime
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–∏–º –º–æ–¥—É–ª—è–º
sys.path.append("Python –∫–æ–¥")
from comfy_upscaler_fixed import ComfyUpscalerFixed

class NeuroPhotoUpscaler:
    def __init__(self):
        self.server_url = "http://localhost:8188"
        self.upscaler = ComfyUpscalerFixed(self.server_url)
        self.input_dir = "–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ"
        self.output_dir = "–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ_8K_ULTRA"
        
    def get_recent_photos(self, days: int = 2) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        recent_photos = []
        
        # –ò—â–µ–º —Ñ–æ—Ç–æ –∑–∞ 26-27 –∏—é–Ω—è 2025
        patterns = [
            "2025-06-26*.jpg",
            "2025-06-27*.jpg"
        ]
        
        for pattern in patterns:
            photos = list(Path(self.input_dir).glob(pattern))
            recent_photos.extend(photos)
        
        print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω—è: {len(recent_photos)}")
        return recent_photos
    
    def get_8k_upscale_workflow(self, image_filename: str) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç workflow –¥–ª—è 8K –∞–ø—Å–∫–µ–π–ª–∞ —Å —Å—É–ø–µ—Ä –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        return {
            "1": {
                "inputs": {
                    "image": image_filename
                },
                "class_type": "LoadImage"
            },
            # –ü–µ—Ä–≤—ã–π –∞–ø—Å–∫–µ–π–ª x2
            "2": {
                "inputs": {
                    "upscale_method": "lanczos",
                    "scale_by": 2.0,
                    "image": ["1", 0]
                },
                "class_type": "ImageScaleBy"
            },
            # –í—Ç–æ—Ä–æ–π –∞–ø—Å–∫–µ–π–ª x2 –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 8K
            "3": {
                "inputs": {
                    "upscale_method": "lanczos", 
                    "scale_by": 2.0,
                    "image": ["2", 0]
                },
                "class_type": "ImageScaleBy"
            },
            # –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
            "4": {
                "inputs": {
                    "sharpen_radius": 1.0,
                    "sigma": 1.0,
                    "alpha": 1.5,
                    "image": ["3", 0]
                },
                "class_type": "ImageSharpen"
            },
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            "5": {
                "inputs": {
                    "filename_prefix": "8K_ULTRA_",
                    "images": ["4", 0]
                },
                "class_type": "SaveImage"
            }
        }
    
    def check_comfyui_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ComfyUI"""
        try:
            import requests
            response = requests.get(f"{self.server_url}/system_stats", timeout=5)
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ComfyUI: {e}")
            return False
    
    def upscale_to_8k(self, image_path: Path) -> bool:
        """–ê–ø—Å–∫–µ–π–ª–∏—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 8K"""
        print(f"üöÄ 8K –∞–ø—Å–∫–µ–π–ª: {image_path.name}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        upload_result = self.upscaler.upload_image(str(image_path))
        if not upload_result:
            return False
        
        uploaded_filename = upload_result["name"]
        print(f"üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_filename}")
        
        # –°–æ–∑–¥–∞–µ–º 8K workflow
        workflow = self.get_8k_upscale_workflow(uploaded_filename)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        prompt_id = self.upscaler.queue_workflow(workflow)
        if not prompt_id:
            return False
        
        print(f"üìã –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏: {prompt_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è 8K)
        if not self.upscaler.wait_for_completion(prompt_id, timeout=600):
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_files = self.upscaler.get_output_images(prompt_id)
        
        if not output_files:
            print(f"‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {image_path.name}")
            return False
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success = True
        for filename in output_files:
            if not self.upscaler.download_image(filename, self.output_dir):
                success = False
        
        if success:
            print(f"‚úÖ 8K –≥–æ—Ç–æ–≤: {image_path.name}")
        
        return success
    
    def run_mass_upscale(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–π 8K –∞–ø—Å–∫–µ–π–ª"""
        print("üöÄ MASS 8K UPSCALER –î–õ–Ø –ù–ï–ô–†–û–§–û–¢–û üöÄ")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ComfyUI
        if not self.check_comfyui_connection():
            print("‚ùå ComfyUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ ComfyUI —Å–µ—Ä–≤–µ—Ä.")
            print("üí° –ö–æ–º–∞–Ω–¥–∞: cd ComfyUI && python main.py")
            return
        
        print("‚úÖ ComfyUI –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(self.output_dir, exist_ok=True)
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {self.output_dir}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
        recent_photos = self.get_recent_photos()
        
        if not recent_photos:
            print("‚ùå –§–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º 8K –∞–ø—Å–∫–µ–π–ª {len(recent_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        print("=" * 60)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ
        successful = 0
        failed = 0
        
        for i, photo_path in enumerate(recent_photos, 1):
            print(f"\n[{i}/{len(recent_photos)}] ", end="")
            
            try:
                if self.upscale_to_8k(photo_path):
                    successful += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                failed += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print(f"üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ì–û 8K –ê–ü–°–ö–ï–ô–õ–ê:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"üìä –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(recent_photos)}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        print("=" * 60)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    upscaler = NeuroPhotoUpscaler()
    upscaler.run_mass_upscale()


if __name__ == "__main__":
    main() 