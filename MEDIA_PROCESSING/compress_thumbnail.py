#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ —Å–∂–∞—Ç–∏–µ –æ–±–ª–æ–∂–∫–∏ YouTube –ø–æ–¥ 2MB
"""

from PIL import Image
import os
import sys

def compress_thumbnail(input_path, output_path=None, max_size_mb=2):
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä"""
    
    if not output_path:
        name, ext = os.path.splitext(input_path)
        output_path = f"{name}_compressed{ext}"
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.open(input_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if img.mode in ('RGBA', 'P'):
        img = img.convert('RGB')
    
    # –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    max_size_bytes = max_size_mb * 1024 * 1024
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–∞ 95
    quality = 95
    
    while quality > 10:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        img.save(output_path, 'JPEG', quality=quality, optimize=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        file_size = os.path.getsize(output_path)
        
        if file_size <= max_size_bytes:
            print(f"‚úÖ –°–∂–∞—Ç–æ –¥–æ {file_size / 1024 / 1024:.2f} MB (–∫–∞—á–µ—Å—Ç–≤–æ {quality})")
            return output_path
        
        quality -= 5
    
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞")
    return output_path

def main():
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    downloads_path = os.path.expanduser("~/Downloads")
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = []
    for file in os.listdir(downloads_path):
        if file.lower().endswith(('.jpg', '.jpeg', '.png', '.webp')):
            full_path = os.path.join(downloads_path, file)
            image_files.append((full_path, os.path.getmtime(full_path)))
    
    if not image_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ –ó–∞–≥—Ä—É–∑–∫–∏")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≤–µ—Ä—Ö—É)
    image_files.sort(key=lambda x: x[1], reverse=True)
    latest_image = image_files[0][0]
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ: {os.path.basename(latest_image)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    file_size = os.path.getsize(latest_image)
    size_mb = file_size / 1024 / 1024
    
    print(f"üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
    
    if size_mb <= 2:
        print("‚úÖ –§–∞–π–ª —É–∂–µ –º–µ–Ω—å—à–µ 2MB!")
        return
    
    # –°–∂–∏–º–∞–µ–º
    output_path = compress_thumbnail(latest_image)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {os.path.basename(output_path)}")

if __name__ == "__main__":
    main() 