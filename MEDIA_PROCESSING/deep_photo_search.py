#!/usr/bin/env python3
import os
import shutil
from PIL import Image
import hashlib
from pathlib import Path
import time

def get_file_hash(filepath):
    """–ü–æ–ª—É—á–∏—Ç—å MD5 —Ö–µ—à —Ñ–∞–π–ª–∞"""
    with open(filepath, 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()

def get_image_info(filepath):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
    try:
        with Image.open(filepath) as img:
            width, height = img.size
            pixels = width * height
            format_type = img.format
            mode = img.mode
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
            if pixels >= 8000000:  # 4K+
                quality = (4, "4K+")
            elif pixels >= 2000000:  # Full HD+
                quality = (3, "Full HD")
            elif pixels >= 1000000:  # HD+
                quality = (2, "HD")
            else:
                quality = (1, "Low")
            
            return {
                'width': width,
                'height': height,
                'pixels': pixels,
                'format': format_type,
                'mode': mode,
                'quality_score': quality[0],
                'quality_name': quality[1]
            }
    except Exception as e:
        return None

def is_likely_ai_generated(filepath, filename):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø–æ—Ö–æ–∂–µ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ"""
    ai_indicators = [
        'upscaled', '4k', 'generated', 'ai', 'flux', 'midjourney', 'dalle',
        'stable', 'diffusion', 'neural', 'gan', 'synthetic', 'rendered',
        '–∫–æ–º—Ñ–∏', '–Ω–µ–π—Ä–æ', '–∏–∏', 'generated', 'output'
    ]
    
    filepath_lower = filepath.lower()
    filename_lower = filename.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø—É—Ç–∏ –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    for indicator in ai_indicators:
        if indicator in filepath_lower or indicator in filename_lower:
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É (AI —á–∞—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
    try:
        with Image.open(filepath) as img:
            width, height = img.size
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ AI —Ä–∞–∑–º–µ—Ä—ã
            ai_sizes = [
                (1024, 1024), (512, 512), (768, 768), (1536, 1536),
                (1920, 1080), (1080, 1920), (2048, 2048), (1344, 768),
                (768, 1344), (1152, 896), (896, 1152), (2688, 1536),
                (1536, 2688), (5376, 3072), (3072, 5376)
            ]
            if (width, height) in ai_sizes or (height, width) in ai_sizes:
                return True
    except:
        pass
    
    return False

def main():
    print("üîç –¢–û–¢–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í–°–ï–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô...")
    print("üìÇ –°–∫–∞–Ω–∏—Ä—É—é –í–°–ï –ø–∞–ø–∫–∏ –∏ –ø–æ–¥–ø–∞–ø–∫–∏...")
    
    # –ù–∞–π—Ç–∏ –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    all_image_files = []
    ai_image_files = []
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = {'.jpg', '.jpeg', '.png', '.webp', '.bmp', '.tiff', '.gif'}
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    priority_folders = [
        './upscaled_images',
        './video/4k_upscaled', 
        './lipsync/4k_upscaled',
        './—Ö–æ—á—É –µ—â–µ/lipsync/4k_upscaled',
        './–≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ',
        './–í–∏–¥–µ–æ –¥–ª—è –∫–ª–∏–ø–∞',
        './photos',
        './–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
        './misc',
        './ALL_TRACK_PHOTOS',
        './LIP_SYNC_FINAL'
    ]
    
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞–ø–∫–∏...")
    for folder in priority_folders:
        if os.path.exists(folder):
            print(f"   üìÅ –°–∫–∞–Ω–∏—Ä—É—é: {folder}")
            for root, dirs, files in os.walk(folder):
                for file in files:
                    if any(file.lower().endswith(ext) for ext in image_extensions):
                        filepath = os.path.join(root, file)
                        all_image_files.append(filepath)
                        
                        if is_likely_ai_generated(filepath, file):
                            ai_image_files.append(filepath)
    
    print("üåç –°–∫–∞–Ω–∏—Ä—É—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏...")
    for root, dirs, files in os.walk('.'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        skip_folder = False
        for priority in priority_folders:
            if root.startswith(priority.lstrip('./')):
                skip_folder = True
                break
        
        if skip_folder:
            continue
            
        for file in files:
            if any(file.lower().endswith(ext) for ext in image_extensions):
                filepath = os.path.join(root, file)
                all_image_files.append(filepath)
                
                if is_likely_ai_generated(filepath, file):
                    ai_image_files.append(filepath)
    
    print(f'üì∏ –ù–∞–π–¥–µ–Ω–æ –í–°–ï–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(all_image_files)}')
    print(f'ü§ñ –ò–∑ –Ω–∏—Ö AI-–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(ai_image_files)}')
    
    # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("üîÑ –ê–Ω–∞–ª–∏–∑ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...")
    
    hash_groups = {}
    processed = 0
    
    for filepath in ai_image_files:
        processed += 1
        if processed % 50 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{len(ai_image_files)}")
        
        try:
            file_hash = get_file_hash(filepath)
            img_info = get_image_info(filepath)
            
            if img_info is None:
                continue
                
            if file_hash not in hash_groups:
                hash_groups[file_hash] = []
            
            hash_groups[file_hash].append({
                'path': filepath,
                'filename': os.path.basename(filepath),
                'size': os.path.getsize(filepath),
                'mtime': os.path.getmtime(filepath),
                **img_info
            })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
            continue
    
    print(f'‚ú® –ù–∞–π–¥–µ–Ω–æ {len(hash_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    print("üèÜ –û—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –≤–µ—Ä—Å–∏–π...")
    best_images = []
    
    for file_hash, group in hash_groups.items():
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –∫–∞—á–µ—Å—Ç–≤–æ -> —Ä–∞–∑–º–µ—Ä -> –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        best = max(group, key=lambda x: (x['quality_score'], x['pixels'], x['size'], x['mtime']))
        if best['quality_score'] >= 2:  # HD –∏ –≤—ã—à–µ
            best_images.append(best)
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –≤—Ä–µ–º–µ–Ω–∏
    best_images.sort(key=lambda x: (x['quality_score'], x['mtime']), reverse=True)
    
    print(f'üéØ –û—Ç–æ–±—Ä–∞–Ω–æ {len(best_images)} –ª—É—á—à–∏—Ö AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if os.path.exists('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ'):
        shutil.rmtree('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ')
    os.makedirs('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', exist_ok=True)
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–ø–∫—É '–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ'...")
    
    copied = 0
    quality_stats = {4: 0, 3: 0, 2: 0}
    
    for img in best_images:
        try:
            filename = img['filename']
            dest_path = os.path.join('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', filename)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
            counter = 1
            base_name, ext = os.path.splitext(filename)
            while os.path.exists(dest_path):
                dest_path = os.path.join('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', f'{base_name}_{counter}{ext}')
                counter += 1
            
            shutil.copy2(img['path'], dest_path)
            copied += 1
            quality_stats[img['quality_score']] += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Ñ–∞–π–ª–æ–≤
            if copied <= 15:
                mtime_str = time.strftime('%Y-%m-%d %H:%M', time.localtime(img['mtime']))
                print(f'   ‚úÖ {filename}')
                print(f'      {img["quality_name"]}: {img["width"]}x{img["height"]} | {mtime_str}')
            elif copied == 16:
                print(f'   ... –∏ –µ—â–µ {len(best_images) - 15} —Ñ–∞–π–ª–æ–≤')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {img["path"]}: {e}')
    
    print(f'\nüéâ –ì–û–¢–û–í–û! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    print(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:')
    print(f'   üèÜ 4K+: {quality_stats[4]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    print(f'   ü•á Full HD: {quality_stats[3]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π') 
    print(f'   ü•à HD: {quality_stats[2]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ä–æ–∑–æ–≤–æ–º –ø–∏–¥–∂–∞–∫–µ
    print(f'\nüîç –ü–û–ò–°–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í –†–û–ó–û–í–û–ú –ü–ò–î–ñ–ê–ö–ï...')
    pink_keywords = ['pink', 'rose', '—Ä–æ–∑–æ–≤', '–ø–∏–¥–∂–∞–∫', 'jacket', 'suit', '–±–ª–µ–π–∑–µ—Ä']
    
    found_pink = []
    for img in best_images:
        filename_lower = img['filename'].lower()
        path_lower = img['path'].lower()
        
        for keyword in pink_keywords:
            if keyword in filename_lower or keyword in path_lower:
                found_pink.append(img)
                break
    
    if found_pink:
        print(f'üå∏ –ù–∞–π–¥–µ–Ω–æ {len(found_pink)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–æ–∑–æ–≤—ã–º –ø–∏–¥–∂–∞–∫–æ–º:')
        for img in found_pink[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f'   üíó {img["filename"]} ({img["quality_name"]}: {img["width"]}x{img["height"]})')
    else:
        print('ü§î –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–æ–∑–æ–≤–æ–º –ø–∏–¥–∂–∞–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º')
        print('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–∞–º!')

if __name__ == "__main__":
    main() 