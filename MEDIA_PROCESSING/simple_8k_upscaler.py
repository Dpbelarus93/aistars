#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ Simple 8K Upscaler –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ üöÄ
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–ø—Å–∫–µ–π–ª–∞ –±–µ–∑ ComfyUI - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PIL –∏ OpenCV
"""

import os
import sys
from pathlib import Path
from PIL import Image, ImageEnhance, ImageFilter
import cv2
import numpy as np
from typing import List

class Simple8KUpscaler:
    def __init__(self):
        self.input_dir = "–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ"
        self.output_dir = "–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ_8K_SIMPLE"
        
    def get_recent_photos(self, days: int = 2) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        recent_photos = []
        
        # –ò—â–µ–º —Ñ–æ—Ç–æ –∑–∞ 26-27 –∏—é–Ω—è 2025
        patterns = [
            "2025-06-26*.jpg",
            "2025-06-27*.jpg"
        ]
        
        for pattern in patterns:
            photos = list(Path(self.input_dir).glob(pattern))
            recent_photos.extend(photos)
        
        print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω—è: {len(recent_photos)}")
        return recent_photos
    
    def enhance_image_quality(self, image: Image.Image) -> Image.Image:
        """–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(1.3)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(1.1)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
        enhancer = ImageEnhance.Color(image)
        image = enhancer.enhance(1.1)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–µ–∑–∫–æ—Å—Ç–∏
        image = image.filter(ImageFilter.UnsharpMask(radius=1, percent=120, threshold=3))
        
        return image
    
    def upscale_to_8k_pil(self, image_path: Path) -> bool:
        """–ê–ø—Å–∫–µ–π–ª–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 8K –∏—Å–ø–æ–ª—å–∑—É—è PIL"""
        try:
            print(f"üöÄ PIL 8K –∞–ø—Å–∫–µ–π–ª: {image_path.name}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                original_size = img.size
                print(f"üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_size[0]}x{original_size[1]}")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è 8K (7680x4320)
                target_width = 7680
                target_height = int((target_width * original_size[1]) / original_size[0])
                
                # –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –±–æ–ª—å—à–µ 4320, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                if target_height > 4320:
                    target_height = 4320
                    target_width = int((target_height * original_size[0]) / original_size[1])
                
                new_size = (target_width, target_height)
                print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {new_size[0]}x{new_size[1]}")
                
                # –ê–ø—Å–∫–µ–π–ª–∏–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                upscaled = img.resize(new_size, Image.LANCZOS)
                
                # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                enhanced = self.enhance_image_quality(upscaled)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                output_filename = f"8K_SIMPLE_{image_path.stem}.jpg"
                output_path = Path(self.output_dir) / output_filename
                
                enhanced.save(
                    output_path, 
                    'JPEG', 
                    quality=95, 
                    optimize=True,
                    progressive=True
                )
                
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_filename}")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path.name}: {e}")
            return False
    
    def upscale_to_8k_opencv(self, image_path: Path) -> bool:
        """–ê–ø—Å–∫–µ–π–ª–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 8K –∏—Å–ø–æ–ª—å–∑—É—è OpenCV (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)"""
        try:
            print(f"üöÄ OpenCV 8K –∞–ø—Å–∫–µ–π–ª: {image_path.name}")
            
            # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = cv2.imread(str(image_path))
            if img is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {image_path.name}")
                return False
            
            original_height, original_width = img.shape[:2]
            print(f"üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_width}x{original_height}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è 8K
            target_width = 7680
            target_height = int((target_width * original_height) / original_width)
            
            if target_height > 4320:
                target_height = 4320
                target_width = int((target_height * original_width) / original_height)
            
            print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {target_width}x{target_height}")
            
            # –ê–ø—Å–∫–µ–π–ª–∏–º —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π INTER_CUBIC
            upscaled = cv2.resize(img, (target_width, target_height), interpolation=cv2.INTER_CUBIC)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–µ–∑–∫–æ—Å—Ç–∏
            kernel = np.array([[-1,-1,-1],
                              [-1, 9,-1],
                              [-1,-1,-1]])
            sharpened = cv2.filter2D(upscaled, -1, kernel)
            
            # –°–º–µ—à–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Ä–µ–∑–∫–∏–π
            enhanced = cv2.addWeighted(upscaled, 0.7, sharpened, 0.3, 0)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_filename = f"8K_OPENCV_{image_path.stem}.jpg"
            output_path = Path(self.output_dir) / output_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            cv2.imwrite(str(output_path), enhanced, [cv2.IMWRITE_JPEG_QUALITY, 95])
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path.name}: {e}")
            return False
    
    def run_mass_upscale(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–π 8K –∞–ø—Å–∫–µ–π–ª"""
        print("üöÄ SIMPLE MASS 8K UPSCALER –î–õ–Ø –ù–ï–ô–†–û–§–û–¢–û üöÄ")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
        os.makedirs(self.output_dir, exist_ok=True)
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {self.output_dir}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
        recent_photos = self.get_recent_photos()
        
        if not recent_photos:
            print("‚ùå –§–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º 8K –∞–ø—Å–∫–µ–π–ª {len(recent_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º PIL + OpenCV –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
        print("=" * 60)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ
        successful_pil = 0
        successful_opencv = 0
        failed = 0
        
        for i, photo_path in enumerate(recent_photos, 1):
            print(f"\n[{i}/{len(recent_photos)}] ", end="")
            
            try:
                # –ü—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                pil_success = self.upscale_to_8k_pil(photo_path)
                opencv_success = self.upscale_to_8k_opencv(photo_path)
                
                if pil_success:
                    successful_pil += 1
                if opencv_success:
                    successful_opencv += 1
                if not pil_success and not opencv_success:
                    failed += 1
                    
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                failed += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print(f"üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ì–û 8K –ê–ü–°–ö–ï–ô–õ–ê:")
        print(f"‚úÖ PIL —É—Å–ø–µ—à–Ω–æ: {successful_pil}")
        print(f"‚úÖ OpenCV —É—Å–ø–µ—à–Ω–æ: {successful_opencv}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"üìä –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(recent_photos)}")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        print("=" * 60)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        upscaler = Simple8KUpscaler()
        upscaler.run_mass_upscale()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 