#!/usr/bin/env python3
"""
–í–ò–î–ï–û –ê–ü–°–ö–ï–ô–õ–ï–†
–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Real-ESRGAN + ffmpeg
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"""
    required = ['ffmpeg', 'python3']
    missing = []
    
    for prog in required:
        if not shutil.which(prog):
            missing.append(prog)
    
    if missing:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã: {', '.join(missing)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã!")
    return True

def find_video_file():
    """–ò—â–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ"""
    video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
    current_dir = Path('.')
    
    videos = []
    for ext in video_extensions:
        videos.extend(current_dir.glob(f"*{ext}"))
        videos.extend(current_dir.glob(f"**/*{ext}"))
    
    if not videos:
        print("‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return None
    
    print("\nüìπ –ù–ê–ô–î–ï–ù–ù–´–ï –í–ò–î–ï–û:")
    for i, video in enumerate(videos, 1):
        size_mb = video.stat().st_size / (1024 * 1024)
        print(f"{i}. {video.name} ({size_mb:.1f} MB)")
    
    while True:
        try:
            choice = int(input(f"\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ (1-{len(videos)}): ")) - 1
            if 0 <= choice < len(videos):
                return videos[choice]
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

def upscale_video(input_file, scale_factor=2):
    """–ê–ø—Å–∫–µ–π–ª–∏–º –≤–∏–¥–µ–æ"""
    input_path = Path(input_file)
    output_name = f"UPSCALED_{scale_factor}X_{input_path.stem}.mp4"
    output_path = Path(output_name)
    
    print(f"\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ê–ü–°–ö–ï–ô–õ: {input_path.name}")
    print(f"üì§ –†–ï–ó–£–õ–¨–¢–ê–¢: {output_name}")
    
    # –ö–æ–º–∞–Ω–¥–∞ ffmpeg –¥–ª—è –∞–ø—Å–∫–µ–π–ª–∞
    cmd = [
        'ffmpeg',
        '-i', str(input_path),
        '-vf', f'scale=iw*{scale_factor}:ih*{scale_factor}:flags=lanczos',
        '-c:v', 'libx264',
        '-preset', 'slow',
        '-crf', '18',
        '-c:a', 'aac',
        '-b:a', '192k',
        '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        str(output_path)
    ]
    
    print(f"\n‚öôÔ∏è  –ö–û–ú–ê–ù–î–ê: {' '.join(cmd)}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
        process = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        if output_path.exists():
            size_mb = output_path.stat().st_size / (1024 * 1024)
            print(f"\n‚úÖ –ì–û–¢–û–í–û! –§–∞–π–ª: {output_name} ({size_mb:.1f} MB)")
            return str(output_path)
        else:
            print("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è!")
            return None
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê FFMPEG: {e}")
        print(f"STDERR: {e.stderr}")
        return None

def enhance_with_realesrgan(input_file):
    """–£–ª—É—á—à–∞–µ–º —á–µ—Ä–µ–∑ Real-ESRGAN –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω"""
    realesrgan_path = Path("Real-ESRGAN")
    
    if not realesrgan_path.exists():
        print("‚ö†Ô∏è  Real-ESRGAN –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ffmpeg")
        return False
    
    print("üéØ –ù–ê–ô–î–ï–ù Real-ESRGAN! –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!")
    
    # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è Real-ESRGAN
    # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg —Å –ª—É—á—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    return True

def main():
    print("üé¨ –í–ò–î–ï–û –ê–ü–°–ö–ï–ô–õ–ï–† - –£–õ–£–ß–®–ï–ù–ò–ï –ö–ê–ß–ï–°–¢–í–ê")
    print("=" * 50)
    
    if not check_dependencies():
        return
    
    # –ò—â–µ–º –≤–∏–¥–µ–æ
    video_file = find_video_file()
    if not video_file:
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–∞—Å—à—Ç–∞–±
    print("\nüìê –í–´–ë–ï–†–ò –ú–ê–°–®–¢–ê–ë –£–í–ï–õ–ò–ß–ï–ù–ò–Ø:")
    print("1. 2x (HD ‚Üí 4K)")
    print("2. 4x (HD ‚Üí 8K)")
    print("3. 1.5x (–Ω–µ–±–æ–ª—å—à–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ)")
    
    scale_options = {1: 2, 2: 4, 3: 1.5}
    
    while True:
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏ (1-3): "))
            if choice in scale_options:
                scale = scale_options[choice]
                break
            else:
                print("‚ùå –í—ã–±–µ—Ä–∏ 1, 2 –∏–ª–∏ 3!")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Real-ESRGAN
    enhance_with_realesrgan(video_file)
    
    # –ê–ø—Å–∫–µ–π–ª–∏–º
    result = upscale_video(video_file, scale)
    
    if result:
        print(f"\nüéâ –£–°–ü–ï–•! –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: {result}")
        print("üí° –ú–æ–∂–µ—à—å —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º!")
    else:
        print("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

if __name__ == "__main__":
    main() 