#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ ORGANIZE LIP SYNC MATERIALS
–ü—Ä–∏–≤–æ–¥–∏–º –≤ –ø–æ—Ä—è–¥–æ–∫ –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞
"""

import os
import shutil
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - üéØ %(message)s')

class LipSyncOrganizer:
    """üéØ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞"""
    
    def __init__(self):
        self.base_dir = Path(".")
        self.organized_dir = self.base_dir / "ORGANIZED_LIP_SYNC"
        self.logger = logging.getLogger("LipSyncOrganizer")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.photos_dir = self.organized_dir / "PHOTOS"
        self.audio_full_dir = self.organized_dir / "AUDIO_FULL_TRACKS"
        self.audio_segments_dir = self.organized_dir / "AUDIO_SEGMENTS"
        self.audio_vocals_dir = self.organized_dir / "AUDIO_VOCALS_ONLY"
        self.for_heygen_dir = self.organized_dir / "FOR_HEYGEN"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
        for dir_path in [self.photos_dir, self.audio_full_dir, 
                        self.audio_segments_dir, self.audio_vocals_dir, self.for_heygen_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def collect_photos(self):
        """üì∏ –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ"""
        self.logger.info("–°–æ–±–∏—Ä–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")
        
        photo_sources = [
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
            "upscaled_images", 
            "LIP_SYNC_WORKSPACE/input_photos"
        ]
        
        collected = 0
        for source in photo_sources:
            source_path = Path(source)
            if source_path.exists():
                # –ò—â–µ–º —Ñ–æ—Ç–æ —Ñ–∞–π–ª—ã
                for ext in ['*.jpg', '*.jpeg', '*.png', '*.webp']:
                    for photo in source_path.glob(ext):
                        if photo.stat().st_size > 100000:  # –ë–æ–ª—å—à–µ 100KB
                            new_name = f"photo_{collected+1:03d}_{photo.name}"
                            dest = self.photos_dir / new_name
                            shutil.copy2(photo, dest)
                            collected += 1
                            
                            if collected >= 20:  # –õ–∏–º–∏—Ç 20 –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ
                                break
                    if collected >= 20:
                        break
        
        self.logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {collected} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        return collected
    
    def collect_audio_segments(self):
        """üéµ –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã"""
        self.logger.info("–°–æ–±–∏—Ä–∞—é –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã...")
        
        audio_sources = [
            "rap_10sec_segments",
            "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π", 
            "LIP_SYNC_WORKSPACE/input_audio"
        ]
        
        collected = 0
        for source in audio_sources:
            source_path = Path(source)
            if source_path.exists():
                # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
                for ext in ['*.wav', '*.mp3', '*.m4a']:
                    for audio in source_path.glob(ext):
                        if audio.stat().st_size > 50000:  # –ë–æ–ª—å—à–µ 50KB
                            new_name = f"segment_{collected+1:03d}_{audio.name}"
                            dest = self.audio_segments_dir / new_name
                            shutil.copy2(audio, dest)
                            collected += 1
        
        self.logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {collected} –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        return collected
    
    def create_heygen_kit(self):
        """üé≠ –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–ª—è HeyGen"""
        self.logger.info("–°–æ–∑–¥–∞—é –Ω–∞–±–æ—Ä –¥–ª—è HeyGen...")
        
        # –û—Ç–±–∏—Ä–∞–µ–º 10 –ª—É—á—à–∏—Ö —Ñ–æ—Ç–æ
        photos = sorted(self.photos_dir.glob("*.png"))[:10]
        
        # –û—Ç–±–∏—Ä–∞–µ–º 10 –ª—É—á—à–∏—Ö –∞—É–¥–∏–æ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º 10-—Å–µ–∫—É–Ω–¥–Ω—ã–µ)
        audio_10sec = sorted(self.audio_segments_dir.glob("*rap_10sec*"))[:5]
        audio_5sec = sorted(self.audio_segments_dir.glob("*rap_5sec*"))[:5]
        
        selected_audio = audio_10sec + audio_5sec
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ HeyGen –ø–∞–ø–∫—É
        for i, photo in enumerate(photos, 1):
            dest = self.for_heygen_dir / f"heygen_photo_{i:02d}.png"
            shutil.copy2(photo, dest)
        
        for i, audio in enumerate(selected_audio, 1):
            dest = self.for_heygen_dir / f"heygen_audio_{i:02d}.wav"
            shutil.copy2(audio, dest)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        instruction = self.for_heygen_dir / "HEYGEN_READY.md"
        with open(instruction, 'w', encoding='utf-8') as f:
            f.write(f"""# üé≠ –ì–û–¢–û–í–û –î–õ–Ø HEYGEN!

## üì∏ –§–û–¢–û–ì–†–ê–§–ò–ò ({len(photos)} —à—Ç.)
""")
            for i, photo in enumerate(photos, 1):
                f.write(f"- heygen_photo_{i:02d}.png\n")
                
            f.write(f"""
## üéµ –ê–£–î–ò–û –¢–†–ï–ö–ò ({len(selected_audio)} —à—Ç.)
""")
            for i, audio in enumerate(selected_audio, 1):
                f.write(f"- heygen_audio_{i:02d}.wav\n")
                
            f.write("""
## üöÄ –ü–õ–ê–ù –°–û–ó–î–ê–ù–ò–Ø:
1. –°–æ–∑–¥–∞—Ç—å 10 –∞–≤–∞—Ç–∞—Ä–æ–≤ –∏–∑ —Ñ–æ—Ç–æ
2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ - 1 –≤–∏–¥–µ–æ —Å –∫–∞–∂–¥—ã–º –∞—É–¥–∏–æ
3. –ò—Ç–æ–≥–æ: 10 √ó 10 = 100 –≤–∏–¥–µ–æ!

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò HEYGEN:
- –ö–∞—á–µ—Å—Ç–≤–æ: HD (1080p)
- –§–æ–Ω: Solid color
- Sync accuracy: Maximum
- –°—Ç–∏–ª—å: Natural movement
""")
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–∞–±–æ—Ä –¥–ª—è HeyGen: {len(photos)} —Ñ–æ—Ç–æ + {len(selected_audio)} –∞—É–¥–∏–æ")
        return len(photos), len(selected_audio)
    
    def create_report(self):
        """üìä –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"""
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        photos_count = len(list(self.photos_dir.glob("*")))
        segments_count = len(list(self.audio_segments_dir.glob("*")))
        heygen_photos = len(list(self.for_heygen_dir.glob("heygen_photo_*")))
        heygen_audio = len(list(self.for_heygen_dir.glob("heygen_audio_*")))
        
        report = self.organized_dir / "MATERIALS_REPORT.md"
        with open(report, 'w', encoding='utf-8') as f:
            f.write(f"""# üìä –û–¢–ß–ï–¢ –û –ú–ê–¢–ï–†–ò–ê–õ–ê–• –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê

## üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- üì∏ **–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–æ–±—Ä–∞–Ω–æ:** {photos_count}
- üéµ **–ê—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:** {segments_count}
- üé≠ **–ì–æ—Ç–æ–≤–æ –¥–ª—è HeyGen:** {heygen_photos} —Ñ–æ—Ç–æ + {heygen_audio} –∞—É–¥–∏–æ

## üìÅ –°–¢–†–£–ö–¢–£–†–ê:
```
ORGANIZED_LIP_SYNC/
‚îú‚îÄ‚îÄ PHOTOS/                    # –í—Å–µ —Ñ–æ—Ç–æ
‚îú‚îÄ‚îÄ AUDIO_SEGMENTS/            # –í—Å–µ –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã  
‚îú‚îÄ‚îÄ FOR_HEYGEN/               # üéØ –ì–û–¢–û–í–û –î–õ–Ø HEYGEN!
‚îÇ   ‚îú‚îÄ‚îÄ heygen_photo_01.png
‚îÇ   ‚îú‚îÄ‚îÄ heygen_audio_01.wav
‚îÇ   ‚îî‚îÄ‚îÄ HEYGEN_READY.md
‚îî‚îÄ‚îÄ MATERIALS_REPORT.md       # –≠—Ç–æ—Ç —Ñ–∞–π–ª
```

## üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É FOR_HEYGEN/
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã heygen_photo_* –∏ heygen_audio_*
3. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ª–∏–ø—Å–∏–Ω–∫ –≤–∏–¥–µ–æ –≤ HeyGen
4. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ {heygen_photos} √ó {heygen_audio} = {heygen_photos * heygen_audio} –≤–∏–¥–µ–æ!

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ù–∞—á–Ω–∏—Ç–µ —Å 1-2 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–∏–¥–µ–æ
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ HEYGEN_READY.md
- –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —É—Å–ø–µ—à–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ HeyGen
""")
        
        self.logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report}")
        
    def organize_all(self):
        """üéØ –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –í–°–ï –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
        
        self.logger.info("üéØ –ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–£–Æ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Æ –ú–ê–¢–ï–†–ò–ê–õ–û–í...")
        self.logger.info("=" * 50)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ
        photos = self.collect_photos()
        segments = self.collect_audio_segments()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä –¥–ª—è HeyGen
        heygen_photos, heygen_audio = self.create_heygen_kit()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.create_report()
        
        self.logger.info("=" * 50)
        self.logger.info("üéâ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        self.logger.info(f"üì∏ –§–æ—Ç–æ: {photos}")
        self.logger.info(f"üéµ –ê—É–¥–∏–æ: {segments}")  
        self.logger.info(f"üé≠ –î–ª—è HeyGen: {heygen_photos} √ó {heygen_audio} = {heygen_photos * heygen_audio} –≤–∏–¥–µ–æ")
        self.logger.info(f"üìÅ –ü–∞–ø–∫–∞: {self.organized_dir}")
        self.logger.info("üöÄ –ì–û–¢–û–í–û –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê!")

def main():
    organizer = LipSyncOrganizer()
    organizer.organize_all()

if __name__ == "__main__":
    main() 