#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ ComfyUI Batch Upscaler üöÄ
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ ComfyUI API
"""

import os
import json
import requests
import base64
from pathlib import Path
import time
from typing import List, Optional
import websocket
import threading
import uuid

class ComfyUpscaler:
    def __init__(self, server_url: str = "http://localhost:8188"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ComfyUI Upscaler
        
        Args:
            server_url: URL —Å–µ—Ä–≤–µ—Ä–∞ ComfyUI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–æ–∫–∞–ª—å–Ω—ã–π)
        """
        self.server_url = server_url.rstrip('/')
        self.client_id = str(uuid.uuid4())
        
    def get_workflow_template(self) -> dict:
        """
        –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π workflow –¥–ª—è upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        return {
            "1": {
                "inputs": {
                    "image": "input_image.jpg",
                    "upload": "image"
                },
                "class_type": "LoadImage",
                "_meta": {
                    "title": "Load Image"
                }
            },
            "2": {
                "inputs": {
                    "model_name": "RealESRGAN_x4plus.pth"
                },
                "class_type": "UpscaleModelLoader",
                "_meta": {
                    "title": "Upscale Model Loader"
                }
            },
            "3": {
                "inputs": {
                    "upscale_model": ["2", 0],
                    "image": ["1", 0]
                },
                "class_type": "ImageUpscaleWithModel",
                "_meta": {
                    "title": "Upscale Image (using Model)"
                }
            },
            "4": {
                "inputs": {
                    "filename_prefix": "upscaled_",
                    "images": ["3", 0]
                },
                "class_type": "SaveImage",
                "_meta": {
                    "title": "Save Image"
                }
            }
        }
    
    def upload_image(self, image_path: str) -> Optional[dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä ComfyUI
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            with open(image_path, 'rb') as f:
                files = {'image': (os.path.basename(image_path), f, 'image/jpeg')}
                response = requests.post(
                    f"{self.server_url}/upload/image",
                    files=files
                )
                
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {image_path}: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {image_path}: {e}")
            return None
    
    def queue_workflow(self, workflow: dict) -> Optional[str]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç workflow –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            workflow: –°–ª–æ–≤–∞—Ä—å —Å workflow
            
        Returns:
            ID –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            data = {
                "prompt": workflow,
                "client_id": self.client_id
            }
            
            response = requests.post(
                f"{self.server_url}/prompt",
                json=data
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get("prompt_id")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return None
    
    def wait_for_completion(self, prompt_id: str, timeout: int = 300) -> bool:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            prompt_id: ID –ø—Ä–æ–º–ø—Ç–∞
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                response = requests.get(f"{self.server_url}/history/{prompt_id}")
                
                if response.status_code == 200:
                    history = response.json()
                    if prompt_id in history:
                        return True
                        
                time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                time.sleep(5)
        
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {prompt_id}")
        return False
    
    def get_output_images(self, prompt_id: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            prompt_id: ID –ø—Ä–æ–º–ø—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –≤—ã—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        """
        try:
            response = requests.get(f"{self.server_url}/history/{prompt_id}")
            
            if response.status_code == 200:
                history = response.json()
                
                if prompt_id in history:
                    outputs = history[prompt_id].get("outputs", {})
                    
                    image_files = []
                    for node_id, node_output in outputs.items():
                        if "images" in node_output:
                            for img in node_output["images"]:
                                image_files.append(img["filename"])
                    
                    return image_files
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            
        return []
    
    def download_image(self, filename: str, output_dir: str) -> bool:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            response = requests.get(f"{self.server_url}/view", params={
                "filename": filename,
                "type": "output"
            })
            
            if response.status_code == 200:
                output_path = os.path.join(output_dir, filename)
                with open(output_path, 'wb') as f:
                    f.write(response.content)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ {filename}: {e}")
            return False
    
    def upscale_image(self, image_path: str, output_dir: str) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç upscale –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ upscale –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        print(f"üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(image_path)}")
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        upload_result = self.upload_image(image_path)
        if not upload_result:
            return False
        
        # 2. –°–æ–∑–¥–∞–µ–º workflow
        workflow = self.get_workflow_template()
        workflow["1"]["inputs"]["image"] = upload_result["name"]
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        prompt_id = self.queue_workflow(workflow)
        if not prompt_id:
            return False
        
        print(f"üìã –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏: {prompt_id}")
        
        # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if not self.wait_for_completion(prompt_id):
            return False
        
        # 5. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        output_files = self.get_output_images(prompt_id)
        
        if not output_files:
            print(f"‚ùå –ù–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è {image_path}")
            return False
        
        # 6. –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success = True
        for filename in output_files:
            if not self.download_image(filename, output_dir):
                success = False
        
        if success:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {os.path.basename(image_path)}")
        
        return success
    
    def batch_upscale(self, input_dir: str, output_dir: str, 
                     image_extensions: tuple = ('.jpg', '.jpeg', '.png', '.bmp', '.tiff')):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞–∫–µ—Ç–Ω—ã–π upscale –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            input_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            image_extensions: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(output_dir, exist_ok=True)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_files = []
        for ext in image_extensions:
            image_files.extend(Path(input_dir).glob(f"*{ext}"))
            image_files.extend(Path(input_dir).glob(f"*{ext.upper()}"))
        
        if not image_files:
            print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {input_dir}")
            return
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print(f"üì§ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {input_dir}")
        print(f"üì• –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_dir}")
        print("=" * 50)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        successful = 0
        failed = 0
        
        for i, image_path in enumerate(image_files, 1):
            print(f"\n[{i}/{len(image_files)}] ", end="")
            
            try:
                if self.upscale_image(str(image_path), output_dir):
                    successful += 1
                else:
                    failed += 1
                    
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path}: {e}")
                failed += 1
        
        print("\n" + "=" * 50)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(image_files)}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ ComfyUI Batch Upscaler üöÄ")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    INPUT_DIR = "."  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    OUTPUT_DIR = "upscaled_images"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    SERVER_URL = "http://localhost:8188"  # ComfyUI —Å–µ—Ä–≤–µ—Ä
    
    # –°–æ–∑–¥–∞–µ–º upscaler
    upscaler = ComfyUpscaler(SERVER_URL)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    try:
        response = requests.get(f"{SERVER_URL}/system_stats", timeout=5)
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ComfyUI: {SERVER_URL}")
        else:
            print(f"‚ùå ComfyUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {SERVER_URL}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ComfyUI: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ComfyUI –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8188")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    upscaler.batch_upscale(INPUT_DIR, OUTPUT_DIR)
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ '{OUTPUT_DIR}'")


if __name__ == "__main__":
    main() 