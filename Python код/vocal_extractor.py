#!/usr/bin/env python3
"""
Vocal Extractor - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∏–∑ —Ç—Ä–µ–∫–æ–≤
–£–±–∏—Ä–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –º—É–∑—ã–∫—É –∏ –±–∏—Ç—ã, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–æ–∫–∞–ª –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞
"""

import os
from pathlib import Path
from pydub import AudioSegment
import numpy as np
import sys

def extract_vocals_karaoke(audio_segment):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–∫–∞–ª –º–µ—Ç–æ–¥–æ–º –∫–∞—Ä–∞–æ–∫–µ (center channel extraction)
    –†–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –≤–æ–∫–∞–ª –≤ —Ü–µ–Ω—Ç—Ä–µ, –∞ –º—É–∑—ã–∫–∞ –ø–æ –±–æ–∫–∞–º
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–µ—Ä–µ–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if audio_segment.channels == 1:
            audio_segment = audio_segment.set_channels(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π –∫–∞–Ω–∞–ª—ã
        left = audio_segment.split_to_mono()[0]
        right = audio_segment.split_to_mono()[1]
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤—ã–π –∫–∞–Ω–∞–ª –∏ —Å–º–µ—à–∏–≤–∞–µ–º —Å –ª–µ–≤—ã–º
        inverted_right = right.invert_phase()
        vocals = left.overlay(inverted_right)
        
        # –£—Å–∏–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        vocals = vocals + 6  # +6 dB
        
        return vocals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ä–∞–æ–∫–µ-–º–µ—Ç–æ–¥–∞: {e}")
        return audio_segment

def extract_vocals_center_focus(audio_segment):
    """
    –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∏ —É–±–∏—Ä–∞–µ—Ç –±–æ–∫–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã
    """
    try:
        if audio_segment.channels == 1:
            return audio_segment
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–Ω–æ –∏–∑ —Å—Ç–µ—Ä–µ–æ (—Ü–µ–Ω—Ç—Ä)
        mono = audio_segment.set_channels(1)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∞—Å—Ç–æ—Ç (100Hz - 4kHz)
        # –ü–æ–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        vocals = mono.normalize()
        
        return vocals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ñ–æ–∫—É—Å–∞: {e}")
        return audio_segment

def extract_vocals_isolation(audio_segment):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∏–∑–æ–ª—è—Ü–∏—è –≤–æ–∫–∞–ª–∞ - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–≤
    """
    try:
        # –ú–µ—Ç–æ–¥ 1: –ö–∞—Ä–∞–æ–∫–µ
        vocals_karaoke = extract_vocals_karaoke(audio_segment)
        
        # –ú–µ—Ç–æ–¥ 2: –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å  
        vocals_center = extract_vocals_center_focus(audio_segment)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ –≥—Ä–æ–º–∫–æ—Å—Ç–∏)
        if vocals_karaoke.dBFS > vocals_center.dBFS:
            result = vocals_karaoke
            method = "–∫–∞—Ä–∞–æ–∫–µ"
        else:
            result = vocals_center  
            method = "—Ü–µ–Ω—Ç—Ä"
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –Ω–µ–º–Ω–æ–≥–æ —Å–∂–∏–º–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É
        result = result.normalize()
        
        return result, method
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏: {e}")
        return audio_segment, "–∏—Å—Ö–æ–¥–Ω—ã–π"

def process_vocal_extraction(input_dir, output_dir):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ WAV —Ñ–∞–π–ª—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–∫–∞–ª
    """
    
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ WAV —Ñ–∞–π–ª—ã —Å –Ω–∞—Ä–µ–∑–∫–æ–π
    wav_files = list(input_path.glob("rap_5sec_*.wav"))
    
    if not wav_files:
        print("‚ùå –§–∞–π–ª—ã rap_5sec_*.wav –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    total_files = len(wav_files)
    print(f"üé§ –ù–∞–π–¥–µ–Ω–æ {total_files} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print(f"üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {input_path}")
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_path}")
    print("üéµ –ò–∑–≤–ª–µ–∫–∞—é –≥–æ–ª–æ—Å –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞...")
    print("=" * 60)
    
    success_count = 0
    
    for i, file_path in enumerate(sorted(wav_files), 1):
        try:
            print(f"üéß [{i}/{total_files}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {file_path.name}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio = AudioSegment.from_wav(str(file_path))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∫–∞–ª
            vocals, method = extract_vocals_isolation(audio)
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_filename = f"vocals_{file_path.stem}.wav"
            output_file_path = output_path / output_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            vocals.export(str(output_file_path), format="wav")
            
            success_count += 1
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–µ—Ç–æ–¥: {method}")
            print(f"   üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_filename}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % 5 == 0 or i == total_files:
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_files} ({(i/total_files)*100:.1f}%)")
            
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path.name}: {e}")
            print()
    
    print("=" * 60)
    print(f"üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{total_files}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_files - success_count}")
    print(f"üìÅ –í—Å–µ –≤–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤: {output_path}")
    print()
    print("üí° –ß–¢–û –ü–û–õ–£–ß–ò–õ–û–°–¨:")
    print("   üé§ –§–∞–π–ª—ã —Ç–æ–ª—å–∫–æ —Å –≥–æ–ª–æ—Å–æ–º (–±–µ–∑ –±–∏—Ç–æ–≤)")
    print("   üîá –£–±—Ä–∞–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞")
    print("   üé¨ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞!")
    print()
    print("üöÄ –ò–°–ü–û–õ–¨–ó–£–ô –§–ê–ô–õ–´ –° –ü–†–ï–§–ò–ö–°–û–ú 'vocals_' –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê!")
    
    return True

def main():
    print("üé§ VOCAL EXTRACTOR")
    print("–£–±–∏—Ä–∞–µ–º –±–∏—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å!")
    print("=" * 50)
    
    # –ü–∞–ø–∫–∏
    desktop_path = Path.home() / "Desktop"
    input_dir = desktop_path / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π"
    output_dir = desktop_path / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π" / "vocals_only"
    
    print(f"üéØ –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {input_dir}")
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_dir}")
    print()
    
    if not input_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_dir}")
        return
    
    process_vocal_extraction(input_dir, output_dir)

if __name__ == "__main__":
    main() 