#!/usr/bin/env python3
"""
üöÄ Simple ComfyUI MCP Server
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ComfyUI —Å Cursor
"""

import json
import asyncio
import os
import requests
from pathlib import Path
from aiohttp import web
from typing import Dict, Any, List

class SimpleComfyUIMCP:
    """–ü—Ä–æ—Å—Ç–æ–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è ComfyUI"""
    
    def __init__(self, comfyui_url: str = "http://localhost:8188"):
        self.comfyui_url = comfyui_url
        
    async def handle_request(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = await request.json()
            method = data.get("method")
            params = data.get("params", {})
            request_id = data.get("id", 1)
            
            print(f"üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {method}")
            
            if method == "initialize":
                result = await self._initialize(params)
            elif method == "tools/list":
                result = await self._list_tools()
            elif method == "tools/call":
                result = await self._call_tool(params)
            else:
                result = {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}"}
            
            response = {
                "jsonrpc": "2.0",
                "id": request_id,
                "result": result
            }
            
            return web.json_response(response)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return web.json_response({
                "jsonrpc": "2.0",
                "id": data.get("id", 1) if 'data' in locals() else 1,
                "error": {"code": -1, "message": str(e)}
            })
    
    async def _initialize(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return {
            "protocolVersion": "2024-11-05",
            "capabilities": {
                "tools": {}
            },
            "serverInfo": {
                "name": "simple-comfyui-mcp",
                "version": "1.0.0"
            }
        }
    
    async def _list_tools(self) -> Dict[str, Any]:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        print("üìã –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        return {
            "tools": [
                {
                    "name": "comfyui_status",
                    "description": "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å ComfyUI —Å–µ—Ä–≤–µ—Ä–∞",
                    "inputSchema": {
                        "type": "object",
                        "properties": {}
                    }
                },
                {
                    "name": "comfyui_list_images",
                    "description": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ",
                    "inputSchema": {
                        "type": "object",
                        "properties": {
                            "directory": {
                                "type": "string",
                                "description": "–ü–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                                "default": "."
                            }
                        }
                    }
                },
                {
                    "name": "comfyui_upscale_single",
                    "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ComfyUI",
                    "inputSchema": {
                        "type": "object",
                        "properties": {
                            "image_path": {
                                "type": "string",
                                "description": "–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"
                            }
                        },
                        "required": ["image_path"]
                    }
                }
            ]
        }
    
    async def _call_tool(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool_name = params.get("name")
        arguments = params.get("arguments", {})
        
        print(f"üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool_name}")
        
        if tool_name == "comfyui_status":
            return await self._check_status()
        elif tool_name == "comfyui_list_images":
            return await self._list_images(arguments)
        elif tool_name == "comfyui_upscale_single":
            return await self._upscale_single(arguments)
        else:
            return {
                "content": [
                    {
                        "type": "text",
                        "text": f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"
                    }
                ]
            }
    
    async def _check_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ComfyUI"""
        try:
            response = requests.get(f"{self.comfyui_url}/system_stats", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                result_text = f"‚úÖ ComfyUI —Ä–∞–±–æ—Ç–∞–µ—Ç!\nüåê URL: {self.comfyui_url}\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {json.dumps(stats, indent=2, ensure_ascii=False)}"
            else:
                result_text = f"‚ùå ComfyUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.status_code})"
        except Exception as e:
            result_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ComfyUI: {e}"
        
        return {
            "content": [
                {
                    "type": "text",
                    "text": result_text
                }
            ]
        }
    
    async def _list_images(self, args: Dict[str, Any]) -> Dict[str, Any]:
        """–°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ"""
        directory = args.get("directory", ".")
        
        if not os.path.exists(directory):
            result_text = f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}"
        else:
            extensions = [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]
            images = []
            
            for ext in extensions:
                images.extend([str(f) for f in Path(directory).glob(f"*{ext}")])
                images.extend([str(f) for f in Path(directory).glob(f"*{ext.upper()}")])
            
            images = sorted(images)
            result_text = f"üìÅ –ü–∞–ø–∫–∞: {directory}\nüì∏ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}\n\n"
            
            if images:
                result_text += "üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:\n"
                for i, img in enumerate(images[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    result_text += f"{i}. {img}\n"
                if len(images) > 10:
                    result_text += f"... –∏ –µ—â–µ {len(images) - 10} —Ñ–∞–π–ª–æ–≤"
            else:
                result_text += "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        return {
            "content": [
                {
                    "type": "text",
                    "text": result_text
                }
            ]
        }
    
    async def _upscale_single(self, args: Dict[str, Any]) -> Dict[str, Any]:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        image_path = args.get("image_path")
        
        if not image_path:
            result_text = "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"
        elif not os.path.exists(image_path):
            result_text = f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"
        else:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ –Ω–∞—à–µ–≥–æ upscaler
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            result_text = f"üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ upscale –ø–æ–ª—É—á–µ–Ω!\nüì∏ –§–∞–π–ª: {image_path}\n‚è≥ –î–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç upscale_single.py"
        
        return {
            "content": [
                {
                    "type": "text",
                    "text": result_text
                }
            ]
        }

async def main():
    """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Simple ComfyUI MCP Server...")
    
    mcp_server = SimpleComfyUIMCP()
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post("/mcp", mcp_server.handle_request)
    app.router.add_options("/mcp", lambda r: web.Response(headers={
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "POST, OPTIONS",
        "Access-Control-Allow-Headers": "Content-Type"
    }))
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS
    async def add_cors(request, handler):
        response = await handler(request)
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Methods"] = "POST, GET, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type"
        return response
    
    app.middlewares.append(add_cors)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "localhost", 3001)
    await site.start()
    
    print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print("üåê URL: http://localhost:3001/mcp")
    print("üîó –ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —Å Cursor")
    print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...")

if __name__ == "__main__":
    asyncio.run(main()) 