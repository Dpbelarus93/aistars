#!/usr/bin/env python3
"""
üöÄ Video Upscaler –¥–ª—è Higgsfield –≤–∏–¥–µ–æ
–ê–ø—Å–∫–µ–π–ª –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Real-ESRGAN
"""

import os
import cv2
import subprocess
import sys
from pathlib import Path
import tempfile
import shutil

def extract_frames(video_path, output_dir):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä—ã –∏–∑ –≤–∏–¥–µ–æ"""
    print(f"üìº –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã –∏–∑ {video_path}")
    
    cap = cv2.VideoCapture(str(video_path))
    fps = cap.get(cv2.CAP_PROP_FPS)
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    
    frame_num = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break
            
        frame_path = output_dir / f"frame_{frame_num:06d}.png"
        cv2.imwrite(str(frame_path), frame)
        frame_num += 1
        
        if frame_num % 10 == 0:
            print(f"  üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–æ {frame_num}/{frame_count} –∫–∞–¥—Ä–æ–≤")
    
    cap.release()
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {frame_num} –∫–∞–¥—Ä–æ–≤, FPS: {fps}")
    return fps, frame_num

def upscale_frames(input_dir, output_dir, scale=4):
    """–ê–ø—Å–∫–µ–π–ª–∏—Ç –∫–∞–¥—Ä—ã —Å –ø–æ–º–æ—â—å—é Real-ESRGAN"""
    print(f"üöÄ –ê–ø—Å–∫–µ–π–ª–∏–º –∫–∞–¥—Ä—ã (x{scale})...")
    
    realesrgan_path = Path("Real-ESRGAN")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    model_path = realesrgan_path / "weights" / "RealESRGAN_x4plus.pth"
    if not model_path.exists():
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å RealESRGAN...")
        model_path.parent.mkdir(exist_ok=True)
        subprocess.run([
            "wget", 
            "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.1.0/RealESRGAN_x4plus.pth",
            "-O", str(model_path)
        ])
    
    # –ê–ø—Å–∫–µ–π–ª–∏–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
    input_frames = list(input_dir.glob("*.png"))
    total_frames = len(input_frames)
    
    for i, frame_path in enumerate(sorted(input_frames)):
        output_frame = output_dir / frame_path.name
        
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Real-ESRGAN
        cmd = [
            sys.executable, 
            str(realesrgan_path / "inference_realesrgan.py"),
            "-n", "RealESRGAN_x4plus",
            "-i", str(frame_path),
            "-o", str(output_frame),
            "--outscale", str(scale)
        ]
        
        try:
            subprocess.run(cmd, check=True, capture_output=True)
            if (i + 1) % 5 == 0:
                print(f"  üîß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{total_frames} –∫–∞–¥—Ä–æ–≤")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {frame_path}: {e}")
    
    print(f"‚úÖ –ê–ø—Å–∫–µ–π–ª–µ–Ω–æ {total_frames} –∫–∞–¥—Ä–æ–≤")

def create_video(frames_dir, output_path, fps):
    """–°–æ–∑–¥–∞—ë—Ç –≤–∏–¥–µ–æ –∏–∑ –∞–ø—Å–∫–µ–π–ª–µ–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤"""
    print(f"üé¨ –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ {output_path}")
    
    frames = sorted(frames_dir.glob("*.png"))
    if not frames:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–ø—Å–∫–µ–π–ª–µ–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã!")
        return
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    first_frame = cv2.imread(str(frames[0]))
    height, width = first_frame.shape[:2]
    
    # –°–æ–∑–¥–∞—ë–º –≤–∏–¥–µ–æ
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(str(output_path), fourcc, fps, (width, height))
    
    for i, frame_path in enumerate(frames):
        frame = cv2.imread(str(frame_path))
        out.write(frame)
        
        if (i + 1) % 10 == 0:
            print(f"  üéûÔ∏è –ó–∞–ø–∏—Å–∞–Ω–æ {i + 1}/{len(frames)} –∫–∞–¥—Ä–æ–≤")
    
    out.release()
    print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")

def upscale_video(input_video, output_video=None, scale=4):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–ø—Å–∫–µ–π–ª–∞ –≤–∏–¥–µ–æ"""
    input_path = Path(input_video)
    
    if output_video is None:
        output_video = input_path.parent / f"{input_path.stem}_upscaled_x{scale}.mp4"
    else:
        output_video = Path(output_video)
    
    print(f"üé¨ –ê–ø—Å–∫–µ–π–ª –≤–∏–¥–µ–æ: {input_path} -> {output_video}")
    
    # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_path = Path(temp_dir)
        frames_dir = temp_path / "frames"
        upscaled_dir = temp_path / "upscaled"
        
        frames_dir.mkdir()
        upscaled_dir.mkdir()
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã
            fps, frame_count = extract_frames(input_path, frames_dir)
            
            # –ê–ø—Å–∫–µ–π–ª–∏–º
            upscale_frames(frames_dir, upscaled_dir, scale)
            
            # –°–æ–∑–¥–∞—ë–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
            create_video(upscaled_dir, output_video, fps)
            
            print(f"üéâ –ì–æ—Ç–æ–≤–æ! –ê–ø—Å–∫–µ–π–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: {output_video}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    return True

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python video_upscaler.py input_video.mp4 [output_video.mp4] [scale]")
        print("–ü—Ä–∏–º–µ—Ä: python video_upscaler.py higgsfield_video.mp4 upscaled_4k.mp4 4")
        sys.exit(1)
    
    input_video = sys.argv[1]
    output_video = sys.argv[2] if len(sys.argv) > 2 else None
    scale = int(sys.argv[3]) if len(sys.argv) > 3 else 4
    
    upscale_video(input_video, output_video, scale) 