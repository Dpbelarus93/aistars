#!/usr/bin/env python3
"""
Audio Splitter - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–∫–∞ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç MP3, WAV, M4A, FLAC –∏ –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
"""

import os
from pathlib import Path
from pydub import AudioSegment
import sys

def split_audio(audio_file, segment_length_seconds=30, output_dir=None):
    """
    –†–µ–∂–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    
    Args:
        audio_file: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        segment_length_seconds: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        output_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—è–¥–æ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º)
    """
    
    audio_path = Path(audio_file)
    
    if not audio_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        return False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if output_dir is None:
        output_dir = audio_path.parent / f"{audio_path.stem}_split"
    else:
        output_dir = Path(output_dir)
    
    output_dir.mkdir(exist_ok=True)
    
    print(f"üéµ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path.name}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ (pydub –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ñ–æ—Ä–º–∞—Ç)
        audio = AudioSegment.from_file(str(audio_path))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        segment_length_ms = segment_length_seconds * 1000
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        total_duration_sec = len(audio) / 1000
        total_segments = int(len(audio) / segment_length_ms) + (1 if len(audio) % segment_length_ms > 0 else 0)
        
        print(f"üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_sec:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üì¶ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: {total_segments} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ {segment_length_seconds} —Å–µ–∫")
        print(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: {output_dir}")
        print("=" * 50)
        
        # –†–µ–∂–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        for i in range(total_segments):
            start_ms = i * segment_length_ms
            end_ms = min((i + 1) * segment_length_ms, len(audio))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment = audio[start_ms:end_ms]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            segment_filename = f"{audio_path.stem}_part_{i+1:03d}.mp3"
            segment_path = output_dir / segment_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment.export(str(segment_path), format="mp3")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            segment_duration = (end_ms - start_ms) / 1000
            start_time = start_ms / 1000
            end_time = end_ms / 1000
            
            print(f"‚úÖ –ß–∞—Å—Ç—å {i+1}/{total_segments}: {segment_filename}")
            print(f"   ‚è±Ô∏è  {start_time:.1f}—Å - {end_time:.1f}—Å ({segment_duration:.1f}—Å)")
        
        print("=" * 50)
        print(f"üéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ {total_segments} —á–∞—Å—Ç–µ–π –≤ –ø–∞–ø–∫–µ: {output_dir}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def split_by_timestamps(audio_file, timestamps, output_dir=None):
    """
    –†–µ–∂–µ—Ç –∞—É–¥–∏–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º
    
    Args:
        audio_file: –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
        timestamps: —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö [(start1, end1), (start2, end2), ...]
        output_dir: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    
    audio_path = Path(audio_file)
    
    if not audio_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        return False
    
    if output_dir is None:
        output_dir = audio_path.parent / f"{audio_path.stem}_custom_split"
    else:
        output_dir = Path(output_dir)
    
    output_dir.mkdir(exist_ok=True)
    
    print(f"üéµ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path.name}")
    
    try:
        audio = AudioSegment.from_file(str(audio_path))
        total_duration_sec = len(audio) / 1000
        
        print(f"üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_sec:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üì¶ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: {len(timestamps)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
        print(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: {output_dir}")
        print("=" * 50)
        
        for i, (start_sec, end_sec) in enumerate(timestamps):
            start_ms = int(start_sec * 1000)
            end_ms = int(end_sec * 1000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            if end_ms > len(audio):
                end_ms = len(audio)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment = audio[start_ms:end_ms]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            segment_filename = f"{audio_path.stem}_segment_{i+1:03d}_{start_sec:.0f}s-{end_sec:.0f}s.mp3"
            segment_path = output_dir / segment_filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment.export(str(segment_path), format="mp3")
            
            segment_duration = (end_ms - start_ms) / 1000
            print(f"‚úÖ –°–µ–≥–º–µ–Ω—Ç {i+1}: {segment_filename}")
            print(f"   ‚è±Ô∏è  {start_sec:.1f}—Å - {end_sec:.1f}—Å ({segment_duration:.1f}—Å)")
        
        print("=" * 50)
        print(f"üéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ {len(timestamps)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ: {output_dir}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False

def find_audio_files(directory="."):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ"""
    audio_extensions = ['.mp3', '.wav', '.m4a', '.flac', '.aac', '.ogg']
    audio_files = []
    
    for ext in audio_extensions:
        audio_files.extend(Path(directory).glob(f"*{ext}"))
        audio_files.extend(Path(directory).glob(f"*{ext.upper()}"))
    
    return audio_files

def main():
    print("üéµ AUDIO SPLITTER - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–∫–∞ –∞—É–¥–∏–æ")
    print("=" * 50)
    
    # –ò—â–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã
    audio_files = find_audio_files("../–ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏")
    
    if not audio_files:
        # –ò—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
        audio_files = find_audio_files(".")
    
    if not audio_files:
        print("‚ùå –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A, FLAC, AAC, OGG")
        return
    
    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(audio_files)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤:")
    for i, file in enumerate(audio_files, 1):
        print(f"  {i}. {file.name}")
    
    print("\nüìã –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:")
    print("1. –†–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 30 —Å–µ–∫—É–Ω–¥)")
    print("2. –ü–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º (—Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä)")
    print("3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ 30 —Å–µ–∫—É–Ω–¥")
    
    try:
        mode = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ").strip()
        
        if mode == "1":
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
            file_num = int(input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(audio_files)}): ")) - 1
            selected_file = audio_files[file_num]
            
            # –í—ã–±–∏—Ä–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = int(input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30): ") or "30")
            
            split_audio(selected_file, duration)
            
        elif mode == "2":
            # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
            file_num = int(input(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(audio_files)}): ")) - 1
            selected_file = audio_files[file_num]
            
            print("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞—á–∞–ª–æ-–∫–æ–Ω–µ—Ü (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)")
            print("–ù–∞–ø—Ä–∏–º–µ—Ä: 0-30, 30-60, 60-90")
            timestamps_input = input("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏: ")
            
            timestamps = []
            for pair in timestamps_input.split(","):
                start, end = map(float, pair.strip().split("-"))
                timestamps.append((start, end))
            
            split_by_timestamps(selected_file, timestamps)
            
        elif mode == "3":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            for audio_file in audio_files:
                print(f"\nüéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {audio_file.name}")
                split_audio(audio_file, 30)
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
    
    except (ValueError, IndexError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

if __name__ == "__main__":
    main() 