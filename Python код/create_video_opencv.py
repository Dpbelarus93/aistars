#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Create Video with OpenCV
–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é OpenCV
"""

import cv2
import os
import glob
from pathlib import Path
import numpy as np

def create_video_from_images(input_dir, output_path, fps=24, codec='mp4v'):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    Args:
        input_dir (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        fps (int): –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        codec (str): –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
    """
    
    print(f"üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print(f"üìÅ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {input_dir}")
    print(f"üé• –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_path}")
    print(f"‚ö° FPS: {fps}")
    
    # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    input_path = Path(input_dir)
    if not input_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_dir}")
        return False
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ PNG —Ñ–∞–π–ª—ã —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º upscaled__*
    image_files = sorted(list(input_path.glob("upscaled__*.png")))
    
    if not image_files:
        print(f"‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {input_dir}")
        return False
    
    print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    first_image = cv2.imread(str(image_files[0]))
    if first_image is None:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_files[0]}")
        return False
    
    height, width, layers = first_image.shape
    print(f"üìê –†–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞: {width}x{height}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
    output_path = Path(output_path)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–µ–∫–∞
    if codec == 'mp4v':
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        output_file = output_path.with_suffix('.mp4')
    elif codec == 'XVID':
        fourcc = cv2.VideoWriter_fourcc(*'XVID')
        output_file = output_path.with_suffix('.avi')
    else:
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        output_file = output_path.with_suffix('.mp4')
    
    # –°–æ–∑–¥–∞–µ–º VideoWriter
    video_writer = cv2.VideoWriter(
        str(output_file), 
        fourcc, 
        fps, 
        (width, height)
    )
    
    if not video_writer.isOpened():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VideoWriter")
        return False
    
    print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–¥—Ä—ã –≤ –≤–∏–¥–µ–æ
    for i, image_file in enumerate(image_files):
        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        frame = cv2.imread(str(image_file))
        
        if frame is None:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å: {image_file}")
            continue
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–∞–∑–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
        if frame.shape[:2] != (height, width):
            frame = cv2.resize(frame, (width, height))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ –≤–∏–¥–µ–æ
        video_writer.write(frame)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (i + 1) % 10 == 0:
            print(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(image_files)} –∫–∞–¥—Ä–æ–≤")
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    video_writer.release()
    cv2.destroyAllWindows()
    
    if output_file.exists():
        file_size = output_file.stat().st_size / (1024 * 1024)  # MB
        duration = len(image_files) / fps
        print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –§–∞–π–ª: {output_file}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:.1f} MB")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üé¨ –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {len(image_files)}")
        return True
    else:
        print("‚ùå –í–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé• OpenCV Video Creator")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    current_dir = Path(__file__).parent.parent
    input_dir = current_dir / "upscaled_images"
    output_dir = current_dir / "final_video"
    output_file = output_dir / "ai_video_opencv.mp4"
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
    success = create_video_from_images(
        input_dir=input_dir,
        output_path=output_file,
        fps=24,
        codec='mp4v'
    )
    
    if success:
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
        return False

if __name__ == "__main__":
    main() 