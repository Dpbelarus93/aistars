#!/usr/bin/env python3
"""
RAP Lip-Sync Cutter - –ù–∞—Ä–µ–∑–∫–∞ —Ä–∞–ø-—Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞
–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞—á–∏—Ç–∫–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –≥—É–±
"""

import os
from pathlib import Path
from pydub import AudioSegment
import sys

def create_rap_segments(audio_file, output_dir):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è RAP –∏ –ª–∏–ø—Å–∏–Ω–∫–∞
    """
    
    audio_path = Path(audio_file)
    
    if not audio_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        return False
    
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    
    print(f"üé§ –ó–∞–≥—Ä—É–∂–∞—é RAP —Ç—Ä–µ–∫: {audio_path.name}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
        print("üì° –ó–∞–≥—Ä—É–∂–∞—é WAV —Ñ–∞–π–ª...")
        audio = AudioSegment.from_wav(str(audio_path))
        total_duration_sec = len(audio) / 1000
        
        print(f"üìä –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration_sec:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: {output_dir}")
        print("üéµ –°–æ–∑–¥–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞...")
        print("=" * 60)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–ø–∞
        segments = [
            # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—á–∏—Ç–∫–∏
            {"name": "intro_hook", "start": 0, "duration": 15, "desc": "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ - –∫–æ—Ä–æ—Ç–∫–∏–π —Ö—É–∫"},
            {"name": "verse_1", "start": 15, "duration": 20, "desc": "–ü–µ—Ä–≤—ã–π –∫—É–ø–ª–µ—Ç"},
            {"name": "energy_peak", "start": 35, "duration": 25, "desc": "–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è —á–∞—Å—Ç—å"},
            {"name": "chorus_section", "start": 60, "duration": 18, "desc": "–ü—Ä–∏–ø–µ–≤/—Ö—É–∫"},
            {"name": "finale_power", "start": max(0, total_duration_sec - 22), "duration": 22, "desc": "–ú–æ—â–Ω—ã–π —Ñ–∏–Ω–∞–ª"},
        ]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration_variants = [
            {"suffix": "short", "duration": 10, "desc": "–ö–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç"},
            {"suffix": "medium", "duration": 30, "desc": "–°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç"}, 
            {"suffix": "long", "duration": 45, "desc": "–î–ª–∏–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç"},
        ]
        
        segment_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
        for seg in segments:
            start_sec = seg["start"]
            duration_sec = seg["duration"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
            if start_sec >= total_duration_sec:
                continue
                
            if start_sec + duration_sec > total_duration_sec:
                duration_sec = total_duration_sec - start_sec
            
            start_ms = int(start_sec * 1000)
            end_ms = int((start_sec + duration_sec) * 1000)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
            segment = audio[start_ms:end_ms]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MP3 —Ñ–æ—Ä–º–∞—Ç–µ
            filename = f"rap_{seg['name']}_{duration_sec:.0f}s.mp3"
            segment_path = output_dir / filename
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é: {filename}")
            segment.export(str(segment_path), format="mp3", bitrate="192k")
            
            segment_count += 1
            print(f"üé§ –°–µ–≥–º–µ–Ω—Ç {segment_count}: {filename}")
            print(f"   üìù {seg['desc']}")
            print(f"   ‚è±Ô∏è  {start_sec:.1f}—Å - {start_sec + duration_sec:.1f}—Å ({duration_sec:.1f}—Å)")
            print()
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞
        print("üî• –°–æ–∑–¥–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤:")
        print("-" * 60)
        
        for variant in duration_variants:
            duration_sec = variant["duration"]
            
            if duration_sec > total_duration_sec:
                duration_sec = total_duration_sec
            
            start_ms = 0
            end_ms = int(duration_sec * 1000)
            
            segment = audio[start_ms:end_ms]
            
            filename = f"rap_experiment_{variant['suffix']}_{duration_sec:.0f}s.mp3"
            segment_path = output_dir / filename
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é: {filename}")
            segment.export(str(segment_path), format="mp3", bitrate="192k")
            
            segment_count += 1
            print(f"üéØ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {segment_count - 5}: {filename}")
            print(f"   üìù {variant['desc']} –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞")
            print(f"   ‚è±Ô∏è  0.0—Å - {duration_sec:.1f}—Å ({duration_sec:.1f}—Å)")
            print()
        
        print("=" * 60)
        print(f"üéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ {segment_count} RAP-—Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞!")
        print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
        print()
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê:")
        print("   üé§ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (10-15—Å) - –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞—á–∏—Ç–∫–∏")
        print("   üéµ –°—Ä–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã (20-30—Å) - –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∫—É–ø–ª–µ—Ç–∞")
        print("   üî• –î–ª–∏–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã (40-45—Å) - –¥–ª—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å–∞")
        print()
        print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –í—ã–±–µ—Ä–∏—Ç–µ –ª—É—á—à–∏–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è")
        print("   2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤ AI –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞")
        print("   3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å –≤–∏–¥–µ–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å WAV –≤ MP3 —Å–Ω–∞—á–∞–ª–∞")
        return False

def main():
    print("üé§ RAP LIP-SYNC CUTTER")
    print("–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ –¥–ª—è –∑–∞—á–∏—Ç–∫–∏ –∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –≥—É–±")
    print("=" * 60)
    
    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
    source_file = Path("../–ê—É–¥–∏–æ —Ç—Ä–µ–∫–∏/–Ø –≤ –ø–æ—Ç–æ–∫–µ, –Ω–µ—Ç —è –≤ —Ç–æ–ø–µ ,.wav")
    
    if not source_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_file}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É...")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
    desktop_path = Path.home() / "Desktop"
    output_dir = desktop_path / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π"
    
    print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {source_file.name}")
    print(f"üìÇ –°–æ–∑–¥–∞—é –ø–∞–ø–∫—É: {output_dir}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
    create_rap_segments(source_file, output_dir)

if __name__ == "__main__":
    main() 