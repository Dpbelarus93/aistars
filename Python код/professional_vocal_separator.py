#!/usr/bin/env python3
"""
üé§ PROFESSIONAL VOCAL SEPARATOR üé§
–¢–æ–ø–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ –æ—Ç –±–∏—Ç–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—É—á—à–∏–µ AI –º–æ–¥–µ–ª–∏: Demucs v4 HTDemucs

–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!
"""

import os
import subprocess
import sys
from pathlib import Path
import time

def install_requirements():
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    """
    print("üîß –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í...")
    print("=" * 60)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Demucs v4 (—Å–∞–º–∞—è –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å)
    print("üöÄ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Demucs v4 HTDemucs (SOTA –º–æ–¥–µ–ª—å)...")
    subprocess.run([sys.executable, "-m", "pip", "install", "demucs"], check=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg-python –¥–ª—è –∞—É–¥–∏–æ
    print("üéµ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞—É–¥–∏–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...")
    subprocess.run([sys.executable, "-m", "pip", "install", "ffmpeg-python"], check=True)
    
    print("‚úÖ –í–°–ï –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –£–°–¢–ê–ù–û–í–õ–ï–ù–´!")
    print()

def separate_vocals_professional(input_dir, output_dir):
    """
    –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –æ—Ç –±–∏—Ç–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç state-of-the-art –º–æ–¥–µ–ª—å HTDemucs
    """
    
    input_path = Path(input_dir)
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ WAV —Ñ–∞–π–ª—ã
    wav_files = list(input_path.glob("rap_5sec_*.wav"))
    
    if not wav_files:
        print("‚ùå –§–∞–π–ª—ã rap_5sec_*.wav –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    total_files = len(wav_files)
    print(f"üé§ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: {total_files} —Ñ–∞–π–ª–æ–≤")
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: HTDemucs v4 (State-of-the-Art)")
    print(f"üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {input_path}")
    print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {output_path}")
    print("üî• –ù–ê–ß–ò–ù–ê–Æ –ú–ê–ì–ò–Æ –ò–ò...")
    print("=" * 60)
    
    success_count = 0
    
    for i, file_path in enumerate(sorted(wav_files), 1):
        try:
            print(f"üéß [{i}/{total_files}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {file_path.name}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Demucs v4 HTDemucs –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            # htdemucs_ft - —ç—Ç–æ fine-tuned –≤–µ—Ä—Å–∏—è (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            cmd = [
                "python", "-m", "demucs.separate",
                "--name", "htdemucs_ft",  # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å
                "--two-stems=vocals",     # –¢–æ–ª—å–∫–æ –≥–æ–ª–æ—Å + –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª
                "--out", str(output_path),
                "--mp3",                  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ MP3 –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                "--mp3-bitrate", "320",   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3
                str(file_path)
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Demucs
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                stem_dir = output_path / "htdemucs_ft" / file_path.stem
                vocals_file = stem_dir / "vocals.mp3"
                instrumental_file = stem_dir / "no_vocals.mp3"
                
                if vocals_file.exists():
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    new_vocals_name = f"vocals_{file_path.stem}.mp3"
                    new_vocals_path = output_path / new_vocals_name
                    
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
                    vocals_file.rename(new_vocals_path)
                    
                    success_count += 1
                    print(f"‚úÖ –£–°–ü–ï–•! –ß–∏—Å—Ç—ã–π –≥–æ–ª–æ—Å –∏–∑–≤–ª–µ—á–µ–Ω")
                    print(f"   üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {new_vocals_name}")
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                    import shutil
                    shutil.rmtree(stem_dir, ignore_errors=True)
                else:
                    print(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {vocals_file}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Demucs: {result.stderr}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % 5 == 0 or i == total_files:
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{total_files} ({(i/total_files)*100:.1f}%)")
            
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path.name}: {e}")
            print()
    
    print("=" * 60)
    print(f"üéâ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{total_files}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total_files - success_count}")
    print(f"üìÅ –í—Å–µ –≤–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤: {output_path}")
    print()
    print("üî• –ß–¢–û –ü–û–õ–£–ß–ò–õ–û–°–¨:")
    print("   üé§ –ö–†–ò–°–¢–ê–õ–¨–ù–û –ß–ò–°–¢–´–ô –ì–û–õ–û–° –±–µ–∑ –±–∏—Ç–æ–≤")
    print("   ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ AI –º–æ–¥–µ–ª—å—é HTDemucs v4")
    print("   üéØ –ö–∞—á–µ—Å—Ç–≤–æ: –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï")
    print("   üé¨ –ì–æ—Ç–æ–≤–æ –¥–ª—è –õ–ò–ü–°–ò–ù–ö–ê!")
    print()
    print("üöÄ –ò–°–ü–û–õ–¨–ó–£–ô –§–ê–ô–õ–´ –° –ü–†–ï–§–ò–ö–°–û–ú 'vocals_' –î–õ–Ø –õ–ò–ü–°–ò–ù–ö–ê!")
    
    return True

def main():
    print("üé§ PROFESSIONAL VOCAL SEPARATOR")
    print("–¢–æ–ø–æ–≤–æ–µ AI —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞!")
    print("–ú–æ–¥–µ–ª—å: HTDemucs v4 (State-of-the-Art)")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Demucs
    try:
        result = subprocess.run(["python", "-m", "demucs.separate", "--help"], 
                              capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ö†Ô∏è  Demucs –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
            install_requirements()
    except FileNotFoundError:
        print("‚ö†Ô∏è  Demucs –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...")
        install_requirements()
    
    # –ü–∞–ø–∫–∏
    desktop_path = Path.home() / "Desktop"
    input_dir = desktop_path / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π"
    output_dir = desktop_path / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π" / "professional_vocals"
    
    print(f"üéØ –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {input_dir}")
    print(f"üìÇ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_dir}")
    print()
    
    if not input_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_dir}")
        return
    
    separate_vocals_professional(input_dir, output_dir)

if __name__ == "__main__":
    main() 