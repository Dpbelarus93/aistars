#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DaVinci Resolve Environment Setup Script
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DaVinci Resolve API
"""

import os
import sys
import platform
from pathlib import Path

def setup_davinci_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è DaVinci Resolve API"""
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è DaVinci Resolve API")
    print("=" * 50)
    
    system = platform.system().lower()
    
    if system == "darwin":  # macOS
        api_path = "/Library/Application Support/Blackmagic Design/DaVinci Resolve/Developer/Scripting"
        lib_path = "/Applications/DaVinci Resolve/DaVinci Resolve.app/Contents/Libraries/Fusion/fusionscript.so"
        modules_path = f"{api_path}/Modules"
        
        print("üçé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS")
        
    elif system == "windows":  # Windows
        api_path = os.path.expandvars(r"%PROGRAMDATA%\Blackmagic Design\DaVinci Resolve\Support\Developer\Scripting")
        lib_path = r"C:\Program Files\Blackmagic Design\DaVinci Resolve\fusionscript.dll"
        modules_path = f"{api_path}\\Modules"
        
        print("ü™ü –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Windows")
        
    elif system == "linux":  # Linux
        api_path = "/opt/resolve/Developer/Scripting"
        lib_path = "/opt/resolve/libs/Fusion/fusionscript.so"
        modules_path = f"{api_path}/Modules"
        
        print("üêß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Linux")
        
    else:
        print(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π DaVinci Resolve:")
    print(f"API Path: {api_path}")
    print(f"Lib Path: {lib_path}")
    print(f"Modules Path: {modules_path}")
    
    api_exists = Path(api_path).exists()
    lib_exists = Path(lib_path).exists()
    modules_exists = Path(modules_path).exists()
    
    print(f"\n‚úÖ API Path —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {api_exists}")
    print(f"‚úÖ Lib Path —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {lib_exists}")
    print(f"‚úÖ Modules Path —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {modules_exists}")
    
    if not all([api_exists, lib_exists, modules_exists]):
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã DaVinci Resolve –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ DaVinci Resolve —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ["RESOLVE_SCRIPT_API"] = api_path
    os.environ["RESOLVE_SCRIPT_LIB"] = lib_path
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ PYTHONPATH
    current_pythonpath = os.environ.get("PYTHONPATH", "")
    if modules_path not in current_pythonpath:
        if current_pythonpath:
            new_pythonpath = f"{current_pythonpath}{os.pathsep}{modules_path}"
        else:
            new_pythonpath = modules_path
        os.environ["PYTHONPATH"] = new_pythonpath
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫ sys.path –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    if modules_path not in sys.path:
        sys.path.insert(0, modules_path)
    
    print(f"\n‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
    print(f"RESOLVE_SCRIPT_API = {os.environ['RESOLVE_SCRIPT_API']}")
    print(f"RESOLVE_SCRIPT_LIB = {os.environ['RESOLVE_SCRIPT_LIB']}")
    print(f"PYTHONPATH –æ–±–Ω–æ–≤–ª–µ–Ω")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
    try:
        import DaVinciResolveScript as dvr_script
        print("‚úÖ DaVinciResolveScript —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!")
        return True
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DaVinciResolveScript: {e}")
        return False

def create_shell_script():
    """–°–æ–∑–¥–∞–µ—Ç shell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    
    system = platform.system().lower()
    
    if system == "darwin" or system == "linux":
        # Bash script –¥–ª—è macOS/Linux
        script_content = '''#!/bin/bash
# DaVinci Resolve Environment Setup

export RESOLVE_SCRIPT_API="/Library/Application Support/Blackmagic Design/DaVinci Resolve/Developer/Scripting"
export RESOLVE_SCRIPT_LIB="/Applications/DaVinci Resolve/DaVinci Resolve.app/Contents/Libraries/Fusion/fusionscript.so"
export PYTHONPATH="$PYTHONPATH:$RESOLVE_SCRIPT_API/Modules/"

echo "‚úÖ DaVinci Resolve environment variables set"
'''
        
        if system == "linux":
            script_content = script_content.replace(
                "/Library/Application Support/Blackmagic Design/DaVinci Resolve/Developer/Scripting",
                "/opt/resolve/Developer/Scripting"
            ).replace(
                "/Applications/DaVinci Resolve/DaVinci Resolve.app/Contents/Libraries/Fusion/fusionscript.so",
                "/opt/resolve/libs/Fusion/fusionscript.so"
            )
        
        script_path = Path("setup_davinci_env.sh")
        
    elif system == "windows":
        # Batch script –¥–ª—è Windows
        script_content = '''@echo off
REM DaVinci Resolve Environment Setup

set RESOLVE_SCRIPT_API=%PROGRAMDATA%\\Blackmagic Design\\DaVinci Resolve\\Support\\Developer\\Scripting
set RESOLVE_SCRIPT_LIB=C:\\Program Files\\Blackmagic Design\\DaVinci Resolve\\fusionscript.dll
set PYTHONPATH=%PYTHONPATH%;%RESOLVE_SCRIPT_API%\\Modules\\

echo ‚úÖ DaVinci Resolve environment variables set
'''
        script_path = Path("setup_davinci_env.bat")
    
    else:
        return False
    
    try:
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        if system != "windows":
            os.chmod(script_path, 0o755)  # Make executable
        
        print(f"\nüìÑ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {script_path}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DaVinci API")
        return True
        
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé¨ DaVinci Resolve Environment Setup")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if setup_davinci_environment():
        print("\n‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–µ–º shell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        create_shell_script()
        
        return True
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        return False

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1) 