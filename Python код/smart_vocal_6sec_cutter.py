#!/usr/bin/env python3
"""
üé§ SMART VOCAL 6SEC CUTTER üé§
–£–º–Ω–∞—è –Ω–∞—Ä–µ–∑–∫–∞ —Ç—Ä–µ–∫–∞ –ø–æ 6 —Å–µ–∫—É–Ω–¥ –¢–û–õ–¨–ö–û —Ç–∞–º –≥–¥–µ –µ—Å—Ç—å –≥–æ–ª–æ—Å
–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏!

–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é AI!
"""

import wave
import numpy as np
from pathlib import Path
import shutil

def analyze_vocal_presence(audio_data, sample_rate, window_size=1.0):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–∞ –≤ –∞—É–¥–∏–æ
    """
    window_samples = int(sample_rate * window_size)
    vocal_segments = []
    
    for i in range(0, len(audio_data), window_samples):
        window = audio_data[i:i + window_samples]
        
        if len(window) < window_samples // 2:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Å–µ–≥–º–µ–Ω—Ç
            continue
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –≤ —Å—Ä–µ–¥–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç–∞—Ö (–≥–æ–ª–æ—Å)
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º–∞—è –∞–º–ø–ª–∏—Ç—É–¥–∞
        rms = np.sqrt(np.mean(window**2))
        
        # –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π)
        vocal_threshold = 0.02
        
        if rms > vocal_threshold:
            start_time = i / sample_rate
            end_time = min((i + window_samples) / sample_rate, len(audio_data) / sample_rate)
            vocal_segments.append((start_time, end_time, rms))
    
    return vocal_segments

def load_audio_simple(file_path):
    """
    –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ WAV —Ñ–∞–π–ª–∞
    """
    try:
        with wave.open(str(file_path), 'rb') as wav_file:
            frames = wav_file.readframes(-1)
            sample_rate = wav_file.getframerate()
            channels = wav_file.getnchannels()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
            audio_data = np.frombuffer(frames, dtype=np.int16)
            
            # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ
            if channels == 2:
                audio_data = audio_data.reshape(-1, 2)
                audio_data = np.mean(audio_data, axis=1)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [-1, 1]
            audio_data = audio_data.astype(np.float32) / 32768.0
            
            return audio_data, sample_rate
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        return None, None

def save_audio_segment(audio_data, sample_rate, start_time, end_time, output_file):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç –∞—É–¥–∏–æ
    """
    try:
        start_sample = int(start_time * sample_rate)
        end_sample = int(end_time * sample_rate)
        
        segment = audio_data[start_sample:end_sample]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ int16
        segment_int16 = (segment * 32767).astype(np.int16)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV
        with wave.open(str(output_file), 'wb') as wav_file:
            wav_file.setnchannels(1)  # –ú–æ–Ω–æ
            wav_file.setsampwidth(2)  # 16-bit
            wav_file.setframerate(sample_rate)
            wav_file.writeframes(segment_int16.tobytes())
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def create_6sec_vocal_segments():
    """
    –°–æ–∑–¥–∞–µ—Ç 6-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã —Å –≥–æ–ª–æ—Å–æ–º
    """
    
    # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫
    music_dir = Path.home() / "Desktop" / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π"
    rap_file = music_dir / "–Ø –≤ –ø–æ—Ç–æ–∫–µ, –Ω–µ—Ç —è –≤ —Ç–æ–ø–µ ,.wav"
    
    if not rap_file.exists():
        print("‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π RAP —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print(f"   –ò—â—É: {rap_file}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è 6-—Å–µ–∫—É–Ω–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
    output_dir = music_dir / "vocals_6sec_segments"
    output_dir.mkdir(exist_ok=True)
    
    print("üé§ SMART VOCAL 6SEC CUTTER")
    print("=" * 50)
    print(f"üéµ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {rap_file.name}")
    print(f"üìÅ –í—ã—Ö–æ–¥: {output_dir.name}")
    print()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...")
    audio_data, sample_rate = load_audio_simple(rap_file)
    
    if audio_data is None:
        return False
    
    duration = len(audio_data) / sample_rate
    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫—É–Ω–¥")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–∞
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞–ª–∏—á–∏–µ –≥–æ–ª–æ—Å–∞...")
    vocal_segments = analyze_vocal_presence(audio_data, sample_rate)
    
    print(f"üé§ –ù–∞–π–¥–µ–Ω–æ {len(vocal_segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å –≥–æ–ª–æ—Å–æ–º")
    print()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ 6-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –±–ª–æ–∫–∏
    print("‚úÇÔ∏è  –ù–ê–†–ï–ó–ê–Æ 6-–°–ï–ö–£–ù–î–ù–´–ï –°–ï–ì–ú–ï–ù–¢–´ –° –ì–û–õ–û–°–û–ú:")
    print("=" * 60)
    
    segment_duration = 6.0  # 6 —Å–µ–∫—É–Ω–¥
    current_time = 0
    segment_count = 0
    
    while current_time < duration - 1:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å 1 —Å–µ–∫—É–Ω–¥–∞
        
        end_time = min(current_time + segment_duration, duration)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ–ª–æ—Å –≤ —ç—Ç–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ
        has_vocal = False
        for vocal_start, vocal_end, energy in vocal_segments:
            # –ï—Å–ª–∏ –≤–æ–∫–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –Ω–∞—à–∏–º 6-—Å–µ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–º
            if vocal_start < end_time and vocal_end > current_time:
                has_vocal = True
                break
        
        if has_vocal:
            segment_count += 1
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            start_min = int(current_time // 60)
            start_sec = int(current_time % 60)
            end_min = int(end_time // 60)
            end_sec = int(end_time % 60)
            
            filename = f"vocal_6sec_{segment_count:03d}_{start_min:02d}m{start_sec:02d}s-{end_min:02d}m{end_sec:02d}s.wav"
            output_file = output_dir / filename
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç
            if save_audio_segment(audio_data, sample_rate, current_time, end_time, output_file):
                
                size_kb = output_file.stat().st_size / 1024
                
                print(f"‚úÖ {segment_count:2d}. {filename}")
                print(f"      ‚è±Ô∏è  {current_time:.1f}s - {end_time:.1f}s ({end_time-current_time:.1f}s)")
                print(f"      üíæ {size_kb:.0f} KB")
                print()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ {segment_count}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
        current_time += segment_duration
    
    print("=" * 60)
    print(f"üéâ –ù–ê–†–ï–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {segment_count} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ 6 —Å–µ–∫—É–Ω–¥")
    print(f"üìÅ –ü–∞–ø–∫–∞: {output_dir}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_vocal_time = segment_count * 6
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üé§ –í—Ä–µ–º—è —Å –≥–æ–ª–æ—Å–æ–º: {total_vocal_time} —Å–µ–∫ ({total_vocal_time/60:.1f} –º–∏–Ω)")
    print(f"   üéµ –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫ ({duration/60:.1f} –º–∏–Ω)")
    print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≥–æ–ª–æ—Å–∞: {(total_vocal_time/duration)*100:.1f}%")
    print()
    print("üí° –¢–ï–ü–ï–†–¨ –£ –¢–ï–ë–Ø –ï–°–¢–¨ –¢–û–õ–¨–ö–û –°–ï–ì–ú–ï–ù–¢–´ –° –ì–û–õ–û–°–û–ú!")
    
    return True

def main():
    print("üé§ SMART VOCAL 6SEC CUTTER")
    print("–ù–∞—Ä–µ–∑–∞–µ–º —Ç—Ä–µ–∫ –ø–æ 6 —Å–µ–∫—É–Ω–¥ –¢–û–õ–¨–ö–û —Å –≥–æ–ª–æ—Å–æ–º!")
    print("=" * 50)
    print()
    
    create_6sec_vocal_segments()

if __name__ == "__main__":
    main() 