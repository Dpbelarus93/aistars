#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DaVinci Resolve Auto Import Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã –∏ —Å–æ–∑–¥–∞–µ—Ç timeline

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- DaVinci Resolve –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
- –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è DaVinci API
"""

import os
import sys
import glob
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ DaVinci Resolve API
try:
    import DaVinciResolveScript as dvr_script
except ImportError:
    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç–∏ –¥–ª—è API
    if sys.platform == "darwin":  # macOS
        api_path = "/Library/Application Support/Blackmagic Design/DaVinci Resolve/Developer/Scripting/Modules"
        lib_path = "/Applications/DaVinci Resolve/DaVinci Resolve.app/Contents/Libraries/Fusion/fusionscript.so"
    elif sys.platform == "win32":  # Windows
        api_path = r"%PROGRAMDATA%\Blackmagic Design\DaVinci Resolve\Support\Developer\Scripting\Modules"
        lib_path = r"C:\Program Files\Blackmagic Design\DaVinci Resolve\fusionscript.dll"
    else:  # Linux
        api_path = "/opt/resolve/Developer/Scripting/Modules"
        lib_path = "/opt/resolve/libs/Fusion/fusionscript.so"
    
    sys.path.append(api_path)
    os.environ["RESOLVE_SCRIPT_LIB"] = lib_path
    
    try:
        import DaVinciResolveScript as dvr_script
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ DaVinci Resolve API: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("1. DaVinci Resolve –∑–∞–ø—É—â–µ–Ω")
        print("2. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)

class DaVinciAutoImporter:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DaVinci Resolve"""
        try:
            self.resolve = dvr_script.scriptapp("Resolve")
            self.project_manager = self.resolve.GetProjectManager()
            self.project = self.project_manager.GetCurrentProject()
            
            if not self.project:
                print("‚ùå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ DaVinci Resolve")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                project_name = "AI_Video_Project"
                self.project = self.project_manager.CreateProject(project_name)
                if self.project:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {project_name}")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
            
            self.media_pool = self.project.GetMediaPool()
            self.media_storage = self.resolve.GetMediaStorage()
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DaVinci Resolve —É—Å–ø–µ—à–Ω–æ")
            print(f"üìÅ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç: {self.project.GetName()}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DaVinci Resolve: {e}")
            # –í–º–µ—Å—Ç–æ sys.exit(1) –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise Exception(f"DaVinci Resolve –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def import_image_sequence(self, image_folder, timeline_name="AI_Generated_Video", fps=24):
        """
        –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–µ—Ç timeline
        
        Args:
            image_folder (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            timeline_name (str): –ò–º—è timeline
            fps (int): –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
        """
        try:
            image_folder = Path(image_folder).resolve()
            
            if not image_folder.exists():
                print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {image_folder}")
                return False
            
            # –ü–æ–∏—Å–∫ PNG —Ñ–∞–π–ª–æ–≤
            png_files = sorted(list(image_folder.glob("upscaled__*.png")))
            
            if not png_files:
                print(f"‚ùå PNG —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {image_folder}")
                return False
            
            print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(png_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤ Media Pool
            root_folder = self.media_pool.GetRootFolder()
            subfolder = self.media_pool.AddSubFolder(root_folder, "AI_Upscaled_Images")
            self.media_pool.SetCurrentFolder(subfolder)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            first_file = str(png_files[0])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            # upscaled__00002_.png -> upscaled__%05d_.png
            import re
            pattern_match = re.search(r'upscaled__(\d+)_\.png', first_file)
            if pattern_match:
                # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                base_path = first_file.replace(pattern_match.group(0), "upscaled__%05d_.png")
                start_frame = int(pattern_match.group(1))
                end_frame = start_frame + len(png_files) - 1
                
                clip_info = {
                    "FilePath": base_path,
                    "StartIndex": start_frame,
                    "EndIndex": end_frame
                }
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                media_pool_items = self.media_pool.ImportMedia([clip_info])
                
                if media_pool_items:
                    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(media_pool_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    # –°–æ–∑–¥–∞–µ–º timeline
                    timeline = self.media_pool.CreateTimelineFromClips(timeline_name, media_pool_items)
                    
                    if timeline:
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω timeline: {timeline_name}")
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π timeline
                        self.project.SetCurrentTimeline(timeline)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FPS
                        timeline_settings = {
                            "timelineFrameRate": str(fps)
                        }
                        
                        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Edit
                        self.resolve.OpenPage("edit")
                        
                        print(f"üé¨ Timeline –≥–æ—Ç–æ–≤! FPS: {fps}")
                        return True
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å timeline")
                        return False
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–∞–π–ª–æ–≤")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            return False
    
    def export_timeline(self, output_path, preset_name="H.264 Master"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç timeline –≤ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
        
        Args:
            output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
            preset_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∞
        """
        try:
            current_timeline = self.project.GetCurrentTimeline()
            if not current_timeline:
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ timeline")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞
            render_settings = {
                "SelectAllFrames": True,
                "TargetDir": str(Path(output_path).parent),
                "CustomName": Path(output_path).stem,
                "VideoQuality": "High"
            }
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if self.project.SetRenderSettings(render_settings):
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Ä–µ–Ω–¥–µ—Ä–∞
                job_id = self.project.AddRenderJob()
                if job_id:
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {job_id}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
                    if self.project.StartRendering([job_id]):
                        print("üé¨ –†–µ–Ω–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                        return True
                    else:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–Ω–¥–µ—Ä")
                        return False
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Ä–µ–Ω–¥–µ—Ä–∞")
                    return False
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé¨ DaVinci Resolve Auto Import Script")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    current_dir = Path(__file__).parent.parent
    upscaled_dir = current_dir / "upscaled_images"
    output_dir = current_dir / "final_video"
    output_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä
    importer = DaVinciAutoImporter()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ–º timeline
    success = importer.import_image_sequence(
        image_folder=upscaled_dir,
        timeline_name="AI_Generated_Scene",
        fps=24
    )
    
    if success:
        print("\n" + "=" * 50)
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üé¨ Timeline —Å–æ–∑–¥–∞–Ω –≤ DaVinci Resolve")
        print("üí° –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ DaVinci Resolve")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç
        export_choice = input("\nü§î –•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ? (y/n): ")
        if export_choice.lower() in ['y', 'yes', '–¥–∞']:
            output_file = output_dir / "ai_generated_video.mp4"
            importer.export_timeline(output_file)
    else:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")
        sys.exit(1)

if __name__ == "__main__":
    main() 