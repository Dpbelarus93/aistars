#!/usr/bin/env python3
"""
üöÄ ComfyUI MCP Server
Model Context Protocol —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ComfyUI —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞–º–∏
"""

import json
import asyncio
import logging
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à upscaler
from comfy_upscaler_fixed import ComfyUpscalerFixed

@dataclass
class MCPTool:
    """–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ MCP"""
    name: str
    description: str
    input_schema: Dict[str, Any]

class ComfyUIMCPServer:
    """MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è ComfyUI"""
    
    def __init__(self, comfyui_url: str = "http://localhost:8188"):
        self.comfyui_url = comfyui_url
        self.upscaler = ComfyUpscalerFixed(comfyui_url)
        self.tools = self._init_tools()
        
    def _init_tools(self) -> List[MCPTool]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        return [
            MCPTool(
                name="comfyui_upscale_image",
                description="–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ComfyUI",
                input_schema={
                    "type": "object",
                    "properties": {
                        "image_path": {
                            "type": "string",
                            "description": "–ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è upscale"
                        },
                        "output_dir": {
                            "type": "string", 
                            "description": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                            "default": "upscaled_images"
                        },
                        "use_model": {
                            "type": "boolean",
                            "description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ AI –º–æ–¥–µ–ª—å –¥–ª—è upscale",
                            "default": False
                        }
                    },
                    "required": ["image_path"]
                }
            ),
            MCPTool(
                name="comfyui_batch_upscale",
                description="–ü–∞–∫–µ—Ç–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ",
                input_schema={
                    "type": "object",
                    "properties": {
                        "input_dir": {
                            "type": "string",
                            "description": "–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"
                        },
                        "output_dir": {
                            "type": "string",
                            "description": "–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                            "default": "upscaled_images"
                        },
                        "extensions": {
                            "type": "array",
                            "items": {"type": "string"},
                            "description": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
                            "default": [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]
                        }
                    },
                    "required": ["input_dir"]
                }
            ),
            MCPTool(
                name="comfyui_status",
                description="–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å ComfyUI —Å–µ—Ä–≤–µ—Ä–∞",
                input_schema={
                    "type": "object",
                    "properties": {}
                }
            ),
            MCPTool(
                name="comfyui_list_images",
                description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ",
                input_schema={
                    "type": "object",
                    "properties": {
                        "directory": {
                            "type": "string",
                            "description": "–ü–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
                            "default": "."
                        }
                    }
                }
            ),
            MCPTool(
                name="comfyui_get_models",
                description="–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö upscale –º–æ–¥–µ–ª–µ–π",
                input_schema={
                    "type": "object",
                    "properties": {}
                }
            )
        ]
    
    async def handle_tool_call(self, tool_name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            if tool_name == "comfyui_upscale_image":
                return await self._upscale_image(arguments)
            elif tool_name == "comfyui_batch_upscale":
                return await self._batch_upscale(arguments)
            elif tool_name == "comfyui_status":
                return await self._get_status()
            elif tool_name == "comfyui_list_images":
                return await self._list_images(arguments)
            elif tool_name == "comfyui_get_models":
                return await self._get_models()
            else:
                return {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}"}
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {tool_name}: {str(e)}"}
    
    async def _upscale_image(self, args: Dict[str, Any]) -> Dict[str, Any]:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        image_path = args["image_path"]
        output_dir = args.get("output_dir", "upscaled_images")
        use_model = args.get("use_model", False)
        
        if not os.path.exists(image_path):
            return {"error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"}
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs(output_dir, exist_ok=True)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º upscale
        success = self.upscaler.upscale_image(image_path, output_dir, use_model)
        
        if success:
            return {
                "success": True,
                "message": f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} —É—Å–ø–µ—à–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–æ",
                "output_dir": output_dir
            }
        else:
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {image_path}"}
    
    async def _batch_upscale(self, args: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–∞–∫–µ—Ç–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        input_dir = args["input_dir"]
        output_dir = args.get("output_dir", "upscaled_images")
        extensions = tuple(args.get("extensions", [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]))
        
        if not os.path.exists(input_dir):
            return {"error": f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_dir}"}
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_files = []
        for ext in extensions:
            image_files.extend(Path(input_dir).glob(f"*{ext}"))
            image_files.extend(Path(input_dir).glob(f"*{ext.upper()}"))
        
        if not image_files:
            return {"error": f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {input_dir}"}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        self.upscaler.batch_upscale(input_dir, output_dir)
        
        return {
            "success": True,
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "input_dir": input_dir,
            "output_dir": output_dir,
            "files_count": len(image_files)
        }
    
    async def _get_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ComfyUI"""
        import requests
        try:
            response = requests.get(f"{self.comfyui_url}/system_stats", timeout=5)
            if response.status_code == 200:
                stats = response.json()
                return {
                    "success": True,
                    "status": "online",
                    "url": self.comfyui_url,
                    "stats": stats
                }
            else:
                return {
                    "success": False,
                    "status": "offline",
                    "error": f"HTTP {response.status_code}"
                }
        except Exception as e:
            return {
                "success": False,
                "status": "offline", 
                "error": str(e)
            }
    
    async def _list_images(self, args: Dict[str, Any]) -> Dict[str, Any]:
        """–°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ"""
        directory = args.get("directory", ".")
        
        if not os.path.exists(directory):
            return {"error": f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}"}
        
        extensions = [".jpg", ".jpeg", ".png", ".bmp", ".tiff"]
        images = []
        
        for ext in extensions:
            images.extend([str(f) for f in Path(directory).glob(f"*{ext}")])
            images.extend([str(f) for f in Path(directory).glob(f"*{ext.upper()}")])
        
        return {
            "success": True,
            "directory": directory,
            "images": sorted(images),
            "count": len(images)
        }
    
    async def _get_models(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        models = self.upscaler.check_available_upscale_models()
        return {
            "success": True,
            "models": models,
            "count": len(models)
        }
    
    def get_tools_manifest(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è MCP"""
        return {
            "tools": [
                {
                    "name": tool.name,
                    "description": tool.description,
                    "inputSchema": tool.input_schema
                }
                for tool in self.tools
            ]
        }

# MCP –ø—Ä–æ—Ç–æ–∫–æ–ª —Å–µ—Ä–≤–µ—Ä
class MCPProtocolHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    
    def __init__(self):
        self.comfyui_server = ComfyUIMCPServer()
        
    async def handle_initialize(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return {
            "protocolVersion": "2024-11-05",
            "capabilities": {
                "tools": {}
            },
            "serverInfo": {
                "name": "comfyui-mcp-server",
                "version": "1.0.0"
            }
        }
    
    async def handle_tools_list(self) -> Dict[str, Any]:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        manifest = self.comfyui_server.get_tools_manifest()
        return {"tools": manifest["tools"]}
    
    async def handle_tools_call(self, params: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        tool_name = params["name"]
        arguments = params.get("arguments", {})
        
        result = await self.comfyui_server.handle_tool_call(tool_name, arguments)
        
        return {
            "content": [
                {
                    "type": "text",
                    "text": json.dumps(result, ensure_ascii=False, indent=2)
                }
            ]
        }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
async def main():
    """–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    handler = MCPProtocolHandler()
    
    print("üöÄ ComfyUI MCP Server –∑–∞–ø—É—â–µ–Ω!")
    print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (stdio, websocket, etc.)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–¥–∏–º REST API —Å–µ—Ä–≤–µ—Ä
    
    from aiohttp import web, web_request
    
    async def handle_mcp_request(request: web_request.Request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            data = await request.json()
            method = data.get("method")
            params = data.get("params", {})
            
            if method == "initialize":
                result = await handler.handle_initialize(params)
            elif method == "tools/list":
                result = await handler.handle_tools_list()
            elif method == "tools/call":
                result = await handler.handle_tools_call(params)
            else:
                result = {"error": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}"}
            
            return web.json_response({
                "jsonrpc": "2.0",
                "id": data.get("id"),
                "result": result
            })
            
        except Exception as e:
            return web.json_response({
                "jsonrpc": "2.0",
                "id": data.get("id"),
                "error": {"code": -1, "message": str(e)}
            })
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post("/mcp", handle_mcp_request)
    
    # –î–æ–±–∞–≤–ª—è–µ–º CORS –¥–ª—è Cursor
    async def add_cors(request, handler):
        response = await handler(request)
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Methods"] = "POST, GET, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "Content-Type"
        return response
    
    app.middlewares.append(add_cors)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "localhost", 3001)
    await site.start()
    
    print("üåê MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001/mcp")
    print("üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Cursor")
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
    try:
        while True:
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...")

if __name__ == "__main__":
    asyncio.run(main()) 