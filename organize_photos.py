#!/usr/bin/env python3
import os
import shutil
from PIL import Image
import hashlib
from pathlib import Path
import time

def get_file_hash(filepath):
    """–ü–æ–ª—É—á–∏—Ç—å MD5 —Ö–µ—à —Ñ–∞–π–ª–∞"""
    with open(filepath, 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()

def get_image_quality_score(filepath):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é"""
    try:
        with Image.open(filepath) as img:
            width, height = img.size
            pixels = width * height
            
            # 4K: 3840x2160 = 8,294,400 pixels
            # Full HD: 1920x1080 = 2,073,600 pixels
            
            if pixels >= 8000000:  # 4K+
                return (4, pixels, width, height)
            elif pixels >= 2000000:  # Full HD+
                return (3, pixels, width, height)
            elif pixels >= 1000000:  # HD+
                return (2, pixels, width, height)
            else:
                return (1, pixels, width, height)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
        return (0, 0, 0, 0)

def main():
    print("üîç –ü–æ–∏—Å–∫ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü...")
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    month_ago = time.time() - (30 * 24 * 60 * 60)
    
    image_files = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.lower().endswith(('.jpg', '.jpeg', '.png', '.webp')):
                filepath = os.path.join(root, file)
                try:
                    if os.path.getmtime(filepath) > month_ago:
                        image_files.append(filepath)
                except:
                    continue
    
    print(f'üì∏ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü')
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ö–µ—à–∞–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    print("üîÑ –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
    hash_groups = {}
    
    for i, filepath in enumerate(image_files):
        if i % 100 == 0:
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i}/{len(image_files)}")
        
        try:
            file_hash = get_file_hash(filepath)
            quality_score, pixels, width, height = get_image_quality_score(filepath)
            
            if file_hash not in hash_groups:
                hash_groups[file_hash] = []
            
            hash_groups[file_hash].append({
                'path': filepath,
                'quality': quality_score,
                'pixels': pixels,
                'width': width,
                'height': height,
                'size': os.path.getsize(filepath)
            })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
            continue
    
    print(f'‚ú® –ù–∞–π–¥–µ–Ω–æ {len(hash_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    print("üéØ –û—Ç–±–æ—Ä –ª—É—á—à–∏—Ö –≤–µ—Ä—Å–∏–π...")
    best_images = []
    
    for file_hash, group in hash_groups.items():
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É, –ø–æ—Ç–æ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
        best = max(group, key=lambda x: (x['quality'], x['pixels'], x['size']))
        if best['quality'] >= 2:  # –¢–æ–ª—å–∫–æ HD –∏ –≤—ã—à–µ
            best_images.append(best)
    
    print(f'üèÜ –û—Ç–æ–±—Ä–∞–Ω–æ {len(best_images)} –ª—É—á—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ '–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ' –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    os.makedirs('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', exist_ok=True)
    
    copied = 0
    quality_stats = {4: 0, 3: 0, 2: 0}
    
    for img in sorted(best_images, key=lambda x: x['quality'], reverse=True):
        try:
            filename = os.path.basename(img['path'])
            dest_path = os.path.join('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', filename)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
            counter = 1
            base_name, ext = os.path.splitext(filename)
            while os.path.exists(dest_path):
                dest_path = os.path.join('–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ', f'{base_name}_{counter}{ext}')
                counter += 1
            
            shutil.copy2(img['path'], dest_path)
            copied += 1
            quality_stats[img['quality']] += 1
            
            quality_names = {4: '4K+', 3: 'Full HD', 2: 'HD'}
            quality_name = quality_names.get(img['quality'], 'Unknown')
            
            if copied <= 10:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f'   ‚úÖ {filename} ({quality_name}: {img["width"]}x{img["height"]})')
            elif copied == 11:
                print(f'   ... –∏ –µ—â–µ {len(best_images) - 10} —Ñ–∞–π–ª–æ–≤')
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {img["path"]}: {e}')
    
    print(f'\nüéâ –ì–û–¢–û–í–û! –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫—É "–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ"')
    print(f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:')
    print(f'   4K+: {quality_stats[4]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
    print(f'   Full HD: {quality_stats[3]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π') 
    print(f'   HD: {quality_stats[2]} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')

if __name__ == "__main__":
    main() 