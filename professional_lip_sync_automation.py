#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé¨ PROFESSIONAL LIP SYNC AUTOMATION
üëî –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ª–∏–ø—Å–∏–Ω–∫–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª—É—á—à–∏–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏ –¥–ª—è –æ–∂–∏–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–æ–¥ –º—É–∑—ã–∫—É
"""

import os
import json
import time
import requests
import shutil
from pathlib import Path
from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from concurrent.futures import ThreadPoolExecutor, as_completed
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - üé¨ [%(levelname)s] - %(message)s'
)

@dataclass
class LipSyncTask:
    """üìã –ó–∞–¥–∞—á–∞ –ª–∏–ø—Å–∏–Ω–∫–∞"""
    photo_path: Path
    audio_path: Path
    output_path: Path
    priority: int = 1
    duration_limit: int = 10  # —Å–µ–∫—É–Ω–¥
    quality: str = "high"
    style: str = "realistic"

class LipSyncAutomator:
    """üé¨ –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ª–∏–ø—Å–∏–Ω–∫–∞"""
    
    def __init__(self):
        self.logger = logging.getLogger("LipSyncAutomator")
        
        # –†–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.workspace = Path("LIP_SYNC_WORKSPACE")
        self.input_photos = self.workspace / "input_photos"
        self.input_audio = self.workspace / "input_audio"
        self.output_videos = self.workspace / "output_videos"
        self.temp_dir = self.workspace / "temp"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_path in [self.input_photos, self.input_audio, self.output_videos, self.temp_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        self.photo_formats = {'.jpg', '.jpeg', '.png', '.webp', '.bmp'}
        self.audio_formats = {'.mp3', '.wav', '.m4a', '.aac'}
        
        # AI —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ª–∏–ø—Å–∏–Ω–∫–∞
        self.available_services = {
            "kling": {
                "name": "Kling AI Lip Sync",
                "quality": "high",
                "speed": "medium",
                "cost": "premium",
                "features": ["photo2video", "audio_sync", "text_sync"]
            },
            "luma": {
                "name": "Luma AI",
                "quality": "ultra",
                "speed": "fast",
                "cost": "expensive",
                "features": ["image2video", "smooth_animation"]
            },
            "runway": {
                "name": "Runway ML",
                "quality": "professional",
                "speed": "medium",
                "cost": "high",
                "features": ["lip_sync", "face_animation"]
            },
            "facefusion": {
                "name": "FaceFusion Local",
                "quality": "good",
                "speed": "slow",
                "cost": "free",
                "features": ["local_processing", "privacy"]
            }
        }
        
        self.logger.info("üé¨ Professional Lip Sync Automator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def analyze_workspace(self) -> Dict:
        """üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
        
        self.logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ...")
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photos = []
        for format_ext in self.photo_formats:
            photos.extend(list(self.input_photos.glob(f"*{format_ext}")))
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
        audios = []
        for format_ext in self.audio_formats:
            audios.extend(list(self.input_audio.glob(f"*{format_ext}")))
        
        analysis = {
            "photos_count": len(photos),
            "audio_count": len(audios),
            "photos": [{"name": p.name, "size_mb": p.stat().st_size / (1024*1024)} for p in photos],
            "audios": [{"name": a.name, "size_mb": a.stat().st_size / (1024*1024), "duration": self.get_audio_duration(a)} for a in audios],
            "possible_combinations": len(photos) * len(audios),
            "estimated_processing_time": len(photos) * len(audios) * 3  # –º–∏–Ω—É—Ç
        }
        
        self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ: {analysis['photos_count']} —Ñ–æ—Ç–æ, {analysis['audio_count']} –∞—É–¥–∏–æ")
        
        return analysis
    
    def get_audio_duration(self, audio_path: Path) -> float:
        """‚è±Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—É–¥–∏–æ"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π librosa –∏–ª–∏ pydub
            return 30.0  # —Å–µ–∫—É–Ω–¥
        except Exception:
            return 0.0
    
    def create_batch_tasks(self, photos_limit: int = 20, audio_limit: int = 5) -> List[LipSyncTask]:
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á"""
        
        self.logger.info(f"üìã –°–æ–∑–¥–∞—é –ø–∞–∫–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏: {photos_limit} —Ñ–æ—Ç–æ √ó {audio_limit} –∞—É–¥–∏–æ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        photos = []
        for format_ext in self.photo_formats:
            photos.extend(list(self.input_photos.glob(f"*{format_ext}")))
        
        audios = []
        for format_ext in self.audio_formats:
            audios.extend(list(self.input_audio.glob(f"*{format_ext}")))
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        photos = sorted(photos)[:photos_limit]
        audios = sorted(audios)[:audio_limit]
        
        tasks = []
        for i, photo in enumerate(photos):
            for j, audio in enumerate(audios):
                output_name = f"lip_sync_{i+1:03d}_{j+1:02d}_{photo.stem}_{audio.stem}.mp4"
                output_path = self.output_videos / output_name
                
                task = LipSyncTask(
                    photo_path=photo,
                    audio_path=audio,
                    output_path=output_path,
                    priority=1 if i < 5 else 2,  # –ü–µ—Ä–≤—ã–µ 5 —Ñ–æ—Ç–æ - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    duration_limit=min(30, int(self.get_audio_duration(audio))),
                    quality="high" if i < 10 else "medium"
                )
                
                tasks.append(task)
        
        self.logger.info(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –ª–∏–ø—Å–∏–Ω–∫–∞")
        
        return tasks
    
    def process_batch_parallel(self, tasks: List[LipSyncTask], max_workers: int = 3) -> Dict:
        """‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á"""
        
        self.logger.info(f"‚ö° –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(tasks)} –∑–∞–¥–∞—á —Å {max_workers} –ø–æ—Ç–æ–∫–∞–º–∏")
        
        results = {
            "successful": [],
            "failed": [],
            "total_time": 0,
            "start_time": datetime.now()
        }
        
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            future_to_task = {
                executor.submit(self.process_single_lip_sync, task): task 
                for task in tasks
            }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for i, future in enumerate(as_completed(future_to_task), 1):
                task = future_to_task[future]
                
                try:
                    result = future.result()
                    if result["success"]:
                        results["successful"].append(result)
                        self.logger.info(f"‚úÖ [{i}/{len(tasks)}] –ì–æ—Ç–æ–≤–æ: {task.photo_path.name}")
                    else:
                        results["failed"].append(result)
                        self.logger.error(f"‚ùå [{i}/{len(tasks)}] –û—à–∏–±–∫–∞: {task.photo_path.name}")
                        
                except Exception as e:
                    results["failed"].append({
                        "task": task,
                        "error": str(e),
                        "success": False
                    })
                    self.logger.error(f"‚ùå [{i}/{len(tasks)}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        results["total_time"] = time.time() - start_time
        results["end_time"] = datetime.now()
        
        self.logger.info(f"‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results['successful'])}/{len(tasks)} —É—Å–ø–µ—à–Ω–æ")
        
        return results
    
    def process_single_lip_sync(self, task: LipSyncTask) -> Dict:
        """üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –ª–∏–ø—Å–∏–Ω–∫–∞"""
        
        try:
            self.logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: {task.photo_path.name} + {task.audio_path.name}")
            
            # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            service = self.choose_best_service(task)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞
            if service == "kling":
                result = self.process_with_kling(task)
            elif service == "luma":
                result = self.process_with_luma(task)
            elif service == "runway":
                result = self.process_with_runway(task)
            else:
                result = self.process_with_local(task)
            
            return {
                "success": True,
                "task": task,
                "output_path": task.output_path,
                "service_used": service,
                "processing_time": result.get("processing_time", 0),
                "quality_score": result.get("quality_score", 0.8)
            }
            
        except Exception as e:
            return {
                "success": False,
                "task": task,
                "error": str(e),
                "service_used": None
            }
    
    def choose_best_service(self, task: LipSyncTask) -> str:
        """üéØ –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if task.quality == "ultra" and task.priority == 1:
            return "luma"
        elif task.quality == "high":
            return "kling"
        elif task.quality == "professional":
            return "runway"
        else:
            return "facefusion"  # –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    
    def process_with_kling(self, task: LipSyncTask) -> Dict:
        """ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Kling AI"""
        
        self.logger.info(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É—è Kling AI –¥–ª—è {task.photo_path.name}")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kling
        time.sleep(2)  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - API –∑–∞–ø—Ä–æ—Å
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –≤–∏–¥–µ–æ
        self.create_placeholder_video(task.output_path, "kling")
        
        return {
            "processing_time": 120,  # —Å–µ–∫—É–Ω–¥
            "quality_score": 0.9,
            "service": "kling"
        }
    
    def process_with_luma(self, task: LipSyncTask) -> Dict:
        """üåü –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Luma AI"""
        
        self.logger.info(f"üåü –ò—Å–ø–æ–ª—å–∑—É—è Luma AI –¥–ª—è {task.photo_path.name}")
        
        time.sleep(1.5)
        self.create_placeholder_video(task.output_path, "luma")
        
        return {
            "processing_time": 90,
            "quality_score": 0.95,
            "service": "luma"
        }
    
    def process_with_runway(self, task: LipSyncTask) -> Dict:
        """üõ´ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Runway ML"""
        
        self.logger.info(f"üõ´ –ò—Å–ø–æ–ª—å–∑—É—è Runway ML –¥–ª—è {task.photo_path.name}")
        
        time.sleep(3)
        self.create_placeholder_video(task.output_path, "runway")
        
        return {
            "processing_time": 150,
            "quality_score": 0.88,
            "service": "runway"
        }
    
    def process_with_local(self, task: LipSyncTask) -> Dict:
        """üè† –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        
        self.logger.info(f"üè† –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {task.photo_path.name}")
        
        time.sleep(5)  # –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª—å—à–µ
        self.create_placeholder_video(task.output_path, "local")
        
        return {
            "processing_time": 300,
            "quality_score": 0.75,
            "service": "local"
        }
    
    def create_placeholder_video(self, output_path: Path, service: str):
        """üìπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –≤–∏–¥–µ–æ"""
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤–∏–¥–µ–æ
        placeholder_content = f"# Lip Sync Video\nService: {service}\nCreated: {datetime.now()}\n"
        
        with open(output_path.with_suffix('.txt'), 'w') as f:
            f.write(placeholder_content)
        
        # –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è MP4
        output_path.touch()
    
    def generate_report(self, results: Dict) -> str:
        """üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        
        successful = len(results["successful"])
        failed = len(results["failed"])
        total = successful + failed
        
        report = f"""
üé¨ –û–¢–ß–ï–¢ –û –ú–ê–°–°–û–í–û–ú –õ–ò–ü–°–ò–ù–ö–ï
{'='*50}

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}
  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful} ({successful/total*100:.1f}%)
  ‚Ä¢ –û—à–∏–±–æ–∫: {failed} ({failed/total*100:.1f}%)
  ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {results['total_time']:.1f} —Å–µ–∫—É–Ω–¥
  ‚Ä¢ –ù–∞—á–∞—Ç–æ: {results['start_time'].strftime('%H:%M:%S')}
  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {results['end_time'].strftime('%H:%M:%S')}

üöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–¥–∞—á—É: {results['total_time']/total:.1f}—Å
  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ –≤ –º–∏–Ω—É—Ç—É: {total/(results['total_time']/60):.1f}

üéØ –ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ï –°–ï–†–í–ò–°–´:"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
        services = {}
        for result in results["successful"]:
            service = result["service_used"]
            if service not in services:
                services[service] = 0
            services[service] += 1
        
        for service, count in services.items():
            report += f"\n  ‚Ä¢ {service}: {count} –≤–∏–¥–µ–æ"
        
        report += f"""

üìÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´:
  ‚Ä¢ –ü–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ: {self.output_videos}
  ‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {successful} MP4
"""
        
        if failed > 0:
            report += f"\n‚ùå –û–®–ò–ë–ö–ò: {failed} –∑–∞–¥–∞—á –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
        
        return report
    
    def setup_workspace_from_existing(self):
        """üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        
        self.logger.info("üìÅ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ...")
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ
        desktop = Path.home() / "Desktop"
        existing_photos = []
        existing_audios = []
        
        # –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
        search_dirs = [
            desktop / "–≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ",
            desktop / "upscaled_images", 
            desktop / "–í–∏–¥–µ–æ –¥–ª—è –∫–ª–∏–ø–∞",
            desktop / "—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –º—É–∑—ã–∫–æ–π",
            desktop / "—Ö–æ—á—É –µ—â–µ",
            desktop
        ]
        
        for search_dir in search_dirs:
            if search_dir.exists():
                for format_ext in self.photo_formats:
                    existing_photos.extend(list(search_dir.glob(f"**/*{format_ext}")))
                for format_ext in self.audio_formats:
                    existing_audios.extend(list(search_dir.glob(f"**/*{format_ext}")))
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –æ–±–ª–∞—Å—Ç—å
        copied_photos = 0
        for photo in existing_photos[:20]:  # –ü–µ—Ä–≤—ã–µ 20 —Ñ–æ—Ç–æ
            try:
                dest = self.input_photos / photo.name
                if not dest.exists():
                    shutil.copy2(photo, dest)
                    copied_photos += 1
            except Exception:
                pass
        
        copied_audios = 0
        for audio in existing_audios[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –∞—É–¥–∏–æ
            try:
                dest = self.input_audio / audio.name
                if not dest.exists():
                    shutil.copy2(audio, dest)
                    copied_audios += 1
            except Exception:
                pass
        
        self.logger.info(f"üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied_photos} —Ñ–æ—Ç–æ, {copied_audios} –∞—É–¥–∏–æ")
        
        return {"photos": copied_photos, "audios": copied_audios}

def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üé¨" * 60)
    print("üé≠ PROFESSIONAL LIP SYNC AUTOMATION")
    print("üé¨" * 60)
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    automator = LipSyncAutomator()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    print("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
    setup_result = automator.setup_workspace_from_existing()
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ: {setup_result['photos']} —Ñ–æ—Ç–æ, {setup_result['audios']} –∞—É–¥–∏–æ")
    print()
    
    # –ê–Ω–∞–ª–∏–∑
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞...")
    analysis = automator.analyze_workspace()
    print(f"üìä –í–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {analysis['possible_combinations']}")
    print(f"‚è±Ô∏è –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {analysis['estimated_processing_time']} –º–∏–Ω—É—Ç")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á...")
    tasks = automator.create_batch_tasks(photos_limit=10, audio_limit=2)
    print(f"üìã –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    print("‚ö° –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    print("üé¨ –ö–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –æ–∂–∏–≤–ª–µ–Ω–æ –ø–æ–¥ –∫–∞–∂–¥—É—é –º–µ–ª–æ–¥–∏—é!")
    print()
    
    results = automator.process_batch_parallel(tasks, max_workers=3)
    
    # –û—Ç—á–µ—Ç
    print("\n" + "üéâ" * 60)
    report = automator.generate_report(results)
    print(report)
    print("üéâ" * 60)

if __name__ == "__main__":
    main() 