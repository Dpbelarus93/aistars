#!/usr/bin/env python3
"""
üïâÔ∏è Multi-Account Telegram Parser - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –ø–∞—Ä—Å–µ—Ä
–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

–ê–≤—Ç–æ—Ä: –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä
–í–µ—Ä—Å–∏—è: 2.0.0
"""

import asyncio
import json
import logging
import random
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union
from dataclasses import dataclass
from pathlib import Path
import sqlite3
from concurrent.futures import ThreadPoolExecutor
import aiohttp

# Telegram –∫–ª–∏–µ–Ω—Ç—ã
try:
    from pyrogram import Client
    from telethon import TelegramClient
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False

logger = logging.getLogger(__name__)

@dataclass
class AccountConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id: str
    api_id: str
    api_hash: str
    phone_number: str
    session_name: str
    is_active: bool = True
    daily_requests: int = 0
    last_request_time: Optional[datetime] = None
    max_daily_requests: int = 5000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç
    rate_limit_delay: float = 1.0

@dataclass
class ScalingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
    max_concurrent_accounts: int = 5
    max_daily_requests_per_account: int = 5000
    global_rate_limit: float = 0.5  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    account_rotation_interval: int = 100  # —Å–æ–æ–±—â–µ–Ω–∏–π
    retry_delay: float = 60.0  # —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    max_retries: int = 3

class MultiAccountParser:
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –ø–∞—Ä—Å–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    def __init__(self, config_file: str = "multi_account_config.json"):
        self.config_file = config_file
        self.accounts: Dict[str, AccountConfig] = {}
        self.scaling_config = ScalingConfig()
        self.active_accounts: List[str] = []
        self.current_account_index = 0
        self.global_stats = {
            "total_messages_parsed": 0,
            "total_accounts_used": 0,
            "total_errors": 0,
            "start_time": datetime.now()
        }
        
        self._load_config()
        self._init_database()
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        default_config = {
            "scaling": {
                "max_concurrent_accounts": 5,
                "max_daily_requests_per_account": 5000,
                "global_rate_limit": 0.5,
                "account_rotation_interval": 100,
                "retry_delay": 60.0,
                "max_retries": 3
            },
            "accounts": []
        }
        
        if Path(self.config_file).exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    default_config.update(config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            default_config["accounts"] = [
                {
                    "account_id": "account_1",
                    "api_id": "YOUR_API_ID_1",
                    "api_hash": "YOUR_API_HASH_1", 
                    "phone_number": "+1234567890",
                    "session_name": "parser_session_1",
                    "is_active": True,
                    "max_daily_requests": 5000,
                    "rate_limit_delay": 1.0
                },
                {
                    "account_id": "account_2", 
                    "api_id": "YOUR_API_ID_2",
                    "api_hash": "YOUR_API_HASH_2",
                    "phone_number": "+0987654321", 
                    "session_name": "parser_session_2",
                    "is_active": True,
                    "max_daily_requests": 5000,
                    "rate_limit_delay": 1.0
                }
            ]
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.config_file}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for acc_data in default_config["accounts"]:
            account = AccountConfig(**acc_data)
            self.accounts[account.account_id] = account
            if account.is_active:
                self.active_accounts.append(account.account_id)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scaling_data = default_config.get("scaling", {})
        self.scaling_config = ScalingConfig(**scaling_data)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.active_accounts)}")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        conn = sqlite3.connect("multi_account_parser.db")
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS accounts (
                account_id TEXT PRIMARY KEY,
                api_id TEXT,
                phone_number TEXT,
                daily_requests INTEGER DEFAULT 0,
                last_request_time TIMESTAMP,
                total_requests INTEGER DEFAULT 0,
                errors_count INTEGER DEFAULT 0,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS parsing_sessions (
                id INTEGER PRIMARY KEY,
                session_id TEXT,
                account_id TEXT,
                target_channel TEXT,
                messages_parsed INTEGER,
                start_time TIMESTAMP,
                end_time TIMESTAMP,
                status TEXT,
                error_message TEXT,
                FOREIGN KEY (account_id) REFERENCES accounts (account_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS rate_limits (
                id INTEGER PRIMARY KEY,
                account_id TEXT,
                request_type TEXT,
                timestamp TIMESTAMP,
                response_time FLOAT,
                success BOOLEAN,
                error_type TEXT,
                FOREIGN KEY (account_id) REFERENCES accounts (account_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def get_next_available_account(self) -> Optional[AccountConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if not self.active_accounts:
            return None
        
        # –†–æ—Ç–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_id = self.active_accounts[self.current_account_index]
        account = self.accounts[account_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        if account.daily_requests >= account.max_daily_requests:
            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –¥–æ—Å—Ç–∏–≥ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if account.last_request_time:
            time_since_last = (datetime.now() - account.last_request_time).total_seconds()
            if time_since_last < account.rate_limit_delay:
                return None
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        self.current_account_index = (self.current_account_index + 1) % len(self.active_accounts)
        
        return account
    
    async def parse_with_account_rotation(self, target: str, max_messages: int = 1000) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {target}")
        
        all_messages = []
        accounts_used = set()
        errors = []
        
        messages_parsed = 0
        account_rotation_count = 0
        
        while messages_parsed < max_messages:
            account = self.get_next_available_account()
            
            if not account:
                logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                await asyncio.sleep(self.scaling_config.retry_delay)
                continue
            
            # –ü–∞—Ä—Å–∏–Ω–≥ —Å —Ç–µ–∫—É—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
            try:
                messages_batch = await self._parse_batch_with_account(
                    account, target, 
                    min(max_messages - messages_parsed, self.scaling_config.account_rotation_interval)
                )
                
                if messages_batch:
                    all_messages.extend(messages_batch)
                    messages_parsed += len(messages_batch)
                    accounts_used.add(account.account_id)
                    account_rotation_count += 1
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                    account.daily_requests += len(messages_batch)
                    account.last_request_time = datetime.now()
                    
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.account_id}: {len(messages_batch)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ì–ª–æ–±–∞–ª—å–Ω—ã–π rate limiting
                await asyncio.sleep(self.scaling_config.global_rate_limit)
                
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.account_id}: {str(e)}"
                logger.error(error_msg)
                errors.append(error_msg)
                
                # –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                account.is_active = False
                if account.account_id in self.active_accounts:
                    self.active_accounts.remove(account.account_id)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self._save_session_stats(target, accounts_used, messages_parsed, errors)
        
        return {
            "success": True,
            "target": target,
            "messages_parsed": messages_parsed,
            "accounts_used": list(accounts_used),
            "account_rotations": account_rotation_count,
            "errors": errors,
            "global_stats": self.global_stats
        }
    
    async def _parse_batch_with_account(self, account: AccountConfig, target: str, limit: int) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –±–∞—Ç—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å Pyrogram/Telethon
        # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await asyncio.sleep(account.rate_limit_delay)
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        messages = []
        for i in range(min(limit, 50)):  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ä–∞–∑
            messages.append({
                "id": f"{account.account_id}_{i}",
                "text": f"–°–æ–æ–±—â–µ–Ω–∏–µ {i} –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ {account.account_id}",
                "date": datetime.now().isoformat(),
                "account_id": account.account_id
            })
        
        return messages
    
    def _save_session_stats(self, target: str, accounts_used: set, messages_parsed: int, errors: List[str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        conn = sqlite3.connect("multi_account_parser.db")
        cursor = conn.cursor()
        
        try:
            session_id = f"session_{int(time.time())}"
            
            cursor.execute('''
                INSERT INTO parsing_sessions 
                (session_id, account_id, target_channel, messages_parsed, start_time, end_time, status, error_message)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                session_id,
                ",".join(accounts_used),
                target,
                messages_parsed,
                self.global_stats["start_time"],
                datetime.now(),
                "completed" if not errors else "completed_with_errors",
                "; ".join(errors) if errors else None
            ))
            
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        finally:
            conn.close()
    
    def get_accounts_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        status = {
            "total_accounts": len(self.accounts),
            "active_accounts": len(self.active_accounts),
            "accounts_details": {}
        }
        
        for account_id, account in self.accounts.items():
            status["accounts_details"][account_id] = {
                "is_active": account.is_active,
                "daily_requests": account.daily_requests,
                "max_daily_requests": account.max_daily_requests,
                "last_request_time": account.last_request_time.isoformat() if account.last_request_time else None,
                "usage_percentage": (account.daily_requests / account.max_daily_requests) * 100
            }
        
        return status
    
    def reset_daily_limits(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å)"""
        for account in self.accounts.values():
            account.daily_requests = 0
            account.last_request_time = None
        
        logger.info("–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    parser = MultiAccountParser()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    status = parser.get_accounts_status()
    print("–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:", json.dumps(status, indent=2, ensure_ascii=False))
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    result = await parser.parse_with_account_rotation("@test_channel", 1000)
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:", json.dumps(result, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    asyncio.run(main()) 