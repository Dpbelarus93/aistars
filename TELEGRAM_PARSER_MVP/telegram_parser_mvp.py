#!/usr/bin/env python3
"""
üïâÔ∏è Telegram Parser MVP - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è Telegram
–°–æ–∑–¥–∞–Ω —Å –º—É–¥—Ä–æ—Å—Ç—å—é –í–µ–¥ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏

–ê–≤—Ç–æ—Ä: –ù–µ–π—Ä–æ–ö–æ–¥–µ—Ä
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import asyncio
import json
import logging
import os
import re
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union, Any
from dataclasses import dataclass, asdict
from pathlib import Path
import hashlib
import aiohttp
from urllib.parse import urlparse

# Telegram –∫–ª–∏–µ–Ω—Ç—ã
try:
    from pyrogram import Client, filters
    from pyrogram.types import Message, Chat, User
    from pyrogram.errors import FloodWait, UserDeactivated, UserDeactivatedBan
    PYROGRAM_AVAILABLE = True
except ImportError:
    PYROGRAM_AVAILABLE = False

try:
    from telethon import TelegramClient, events
    from telethon.tl.types import Channel, Chat as TelethonChat, User as TelethonUser
    from telethon.errors import FloodWaitError, UserDeactivatedError
    TELETHON_AVAILABLE = True
except ImportError:
    TELETHON_AVAILABLE = False

# –ò–ò –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
try:
    from textblob import TextBlob
    import nltk
    from collections import Counter
    AI_AVAILABLE = True
except ImportError:
    AI_AVAILABLE = False

# –í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫
try:
    from fastapi import FastAPI, HTTPException, BackgroundTasks
    from fastapi.responses import HTMLResponse, JSONResponse
    from fastapi.staticfiles import StaticFiles
    from pydantic import BaseModel
    WEB_AVAILABLE = True
except ImportError:
    WEB_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_parser.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class ParsedMessage:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    id: int
    text: str
    date: datetime
    author: str
    author_id: int
    channel_id: int
    channel_name: str
    message_type: str
    media_type: Optional[str] = None
    media_url: Optional[str] = None
    reply_to: Optional[int] = None
    views: Optional[int] = None
    forwards: Optional[int] = None
    sentiment: Optional[str] = None
    keywords: Optional[List[str]] = None
    language: Optional[str] = None

@dataclass
class ParseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    target: str  # –ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
    max_messages: int = 1000
    days_back: int = 7
    keywords: List[str] = None
    exclude_keywords: List[str] = None
    include_media: bool = True
    analyze_sentiment: bool = True
    extract_keywords: bool = True
    min_message_length: int = 10
    rate_limit_delay: float = 1.0

class TelegramParserMVP:
    """
    üïâÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞ Telegram
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –º—É–¥—Ä–æ—Å—Ç—å –¥—Ä–µ–≤–Ω–∏—Ö –ø–∏—Å–∞–Ω–∏–π —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
    –¥–ª—è —ç—Ç–∏—á–Ω–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self, config_file: str = "config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.config = self._load_config(config_file)
        self.db_path = "telegram_data.db"
        self.pyrogram_client = None
        self.telethon_client = None
        self.current_engine = None
        self.stats = {
            'parsed_messages': 0,
            'errors': 0,
            'start_time': None,
            'channels_processed': 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._init_database()
        
        logger.info("üïâÔ∏è Telegram Parser MVP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "telegram": {
                "api_id": "",
                "api_hash": "",
                "phone_number": "",
                "session_name": "parser_session"
            },
            "database": {
                "path": "telegram_data.db"
            },
            "parsing": {
                "rate_limit": 1.0,
                "max_retries": 3,
                "timeout": 30
            },
            "ai": {
                "sentiment_analysis": True,
                "keyword_extraction": True,
                "language_detection": True
            },
            "privacy": {
                "anonymize_users": True,
                "exclude_private_data": True,
                "hash_user_ids": True
            }
        }
        
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2, ensure_ascii=False)
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file}")
        
        return default_config
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY,
                message_id INTEGER,
                text TEXT,
                date TIMESTAMP,
                author TEXT,
                author_id_hash TEXT,
                channel_id INTEGER,
                channel_name TEXT,
                message_type TEXT,
                media_type TEXT,
                media_url TEXT,
                reply_to INTEGER,
                views INTEGER,
                forwards INTEGER,
                sentiment TEXT,
                keywords TEXT,
                language TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞–Ω–∞–ª–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS channels (
                id INTEGER PRIMARY KEY,
                channel_id INTEGER UNIQUE,
                channel_name TEXT,
                title TEXT,
                description TEXT,
                members_count INTEGER,
                type TEXT,
                is_verified BOOLEAN,
                is_scam BOOLEAN,
                is_fake BOOLEAN,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS parsing_stats (
                id INTEGER PRIMARY KEY,
                session_id TEXT,
                channel_name TEXT,
                messages_parsed INTEGER,
                errors_count INTEGER,
                start_time TIMESTAMP,
                end_time TIMESTAMP,
                config TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def _init_pyrogram_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞"""
        if not PYROGRAM_AVAILABLE:
            logger.error("Pyrogram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        try:
            self.pyrogram_client = Client(
                self.config['telegram']['session_name'],
                api_id=self.config['telegram']['api_id'],
                api_hash=self.config['telegram']['api_hash'],
                phone_number=self.config['telegram']['phone_number']
            )
            await self.pyrogram_client.start()
            logger.info("‚úÖ Pyrogram –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pyrogram: {e}")
            return False
    
    async def _init_telethon_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞"""
        if not TELETHON_AVAILABLE:
            logger.error("Telethon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        try:
            self.telethon_client = TelegramClient(
                self.config['telegram']['session_name'] + '_telethon',
                self.config['telegram']['api_id'],
                self.config['telegram']['api_hash']
            )
            await self.telethon_client.start(phone=self.config['telegram']['phone_number'])
            logger.info("‚úÖ Telethon –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {e}")
            return False
    
    async def initialize_clients(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å fallback"""
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pyrogram (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π)
        if await self._init_pyrogram_client():
            self.current_engine = "pyrogram"
            return True
        
        # Fallback –Ω–∞ Telethon
        if await self._init_telethon_client():
            self.current_engine = "telethon"
            return True
        
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç")
        return False
    
    def _anonymize_user_data(self, user_id: int, username: str) -> Dict:
        """–ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.config['privacy']['anonymize_users']:
            return {'id': user_id, 'username': username}
        
        # –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id_hash = hashlib.sha256(str(user_id).encode()).hexdigest()[:16]
        
        # –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è username
        if username and self.config['privacy']['hash_user_ids']:
            username = f"user_{user_id_hash}"
        
        return {
            'id_hash': user_id_hash,
            'username': username if username else f"user_{user_id_hash}"
        }
    
    def _analyze_sentiment(self, text: str) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        if not AI_AVAILABLE or not self.config['ai']['sentiment_analysis']:
            return None
        
        try:
            blob = TextBlob(text)
            polarity = blob.sentiment.polarity
            
            if polarity > 0.1:
                return "positive"
            elif polarity < -0.1:
                return "negative"
            else:
                return "neutral"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return None
    
    def _extract_keywords(self, text: str, top_n: int = 5) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
        if not AI_AVAILABLE or not self.config['ai']['keyword_extraction']:
            return []
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text.lower())
            word_freq = Counter(words)
            return [word for word, _ in word_freq.most_common(top_n)]
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {e}")
            return []
    
    def _detect_language(self, text: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not AI_AVAILABLE or not self.config['ai']['language_detection']:
            return None
        
        try:
            blob = TextBlob(text)
            return blob.detect_language()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
            return None
    
    def _filter_message(self, text: str, config: ParseConfig) -> bool:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if len(text) < config.min_message_length:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if config.keywords:
            text_lower = text.lower()
            if not any(keyword.lower() in text_lower for keyword in config.keywords):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
        if config.exclude_keywords:
            text_lower = text.lower()
            if any(keyword.lower() in text_lower for keyword in config.exclude_keywords):
                return False
        
        return True
    
    async def _parse_with_pyrogram(self, config: ParseConfig) -> List[ParsedMessage]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pyrogram"""
        messages = []
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            chat = await self.pyrogram_client.get_chat(config.target)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            await self._save_channel_info(chat)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            start_date = datetime.now() - timedelta(days=config.days_back)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in self.pyrogram_client.get_chat_history(
                config.target, 
                limit=config.max_messages
            ):
                if message.date < start_date:
                    break
                
                if not message.text:
                    continue
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                if not self._filter_message(message.text, config):
                    continue
                
                # –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = self._anonymize_user_data(
                    message.from_user.id if message.from_user else 0,
                    message.from_user.username if message.from_user else "unknown"
                )
                
                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
                sentiment = self._analyze_sentiment(message.text) if config.analyze_sentiment else None
                keywords = self._extract_keywords(message.text) if config.extract_keywords else []
                language = self._detect_language(message.text)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                parsed_msg = ParsedMessage(
                    id=message.id,
                    text=message.text,
                    date=message.date,
                    author=user_data['username'],
                    author_id=user_data.get('id_hash', user_data.get('id', 0)),
                    channel_id=chat.id,
                    channel_name=chat.username or chat.title,
                    message_type="text",
                    media_type=message.media.value if message.media else None,
                    views=message.views,
                    sentiment=sentiment,
                    keywords=keywords,
                    language=language
                )
                
                messages.append(parsed_msg)
                self.stats['parsed_messages'] += 1
                
                # Rate limiting
                await asyncio.sleep(config.rate_limit_delay)
                
                if len(messages) % 100 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å Pyrogram: {e}")
            self.stats['errors'] += 1
        
        return messages
    
    async def _parse_with_telethon(self, config: ParseConfig) -> List[ParsedMessage]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon"""
        messages = []
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
            entity = await self.telethon_client.get_entity(config.target)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            start_date = datetime.now() - timedelta(days=config.days_back)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in self.telethon_client.iter_messages(
                entity,
                limit=config.max_messages
            ):
                if message.date < start_date:
                    break
                
                if not message.text:
                    continue
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                if not self._filter_message(message.text, config):
                    continue
                
                # –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = self._anonymize_user_data(
                    message.sender_id or 0,
                    getattr(message.sender, 'username', 'unknown') if message.sender else 'unknown'
                )
                
                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
                sentiment = self._analyze_sentiment(message.text) if config.analyze_sentiment else None
                keywords = self._extract_keywords(message.text) if config.extract_keywords else []
                language = self._detect_language(message.text)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                parsed_msg = ParsedMessage(
                    id=message.id,
                    text=message.text,
                    date=message.date,
                    author=user_data['username'],
                    author_id=user_data.get('id_hash', user_data.get('id', 0)),
                    channel_id=entity.id,
                    channel_name=getattr(entity, 'username', None) or getattr(entity, 'title', 'unknown'),
                    message_type="text",
                    media_type=str(type(message.media).__name__) if message.media else None,
                    views=getattr(message, 'views', None),
                    sentiment=sentiment,
                    keywords=keywords,
                    language=language
                )
                
                messages.append(parsed_msg)
                self.stats['parsed_messages'] += 1
                
                # Rate limiting
                await asyncio.sleep(config.rate_limit_delay)
                
                if len(messages) % 100 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å Telethon: {e}")
            self.stats['errors'] += 1
        
        return messages
    
    async def _save_channel_info(self, chat):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT OR REPLACE INTO channels 
                (channel_id, channel_name, title, description, members_count, type, is_verified, is_scam, is_fake)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                chat.id,
                getattr(chat, 'username', None),
                getattr(chat, 'title', None),
                getattr(chat, 'description', None),
                getattr(chat, 'members_count', None),
                str(chat.type),
                getattr(chat, 'is_verified', False),
                getattr(chat, 'is_scam', False),
                getattr(chat, 'is_fake', False)
            ))
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
        finally:
            conn.close()
    
    async def _save_messages(self, messages: List[ParsedMessage]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            for msg in messages:
                cursor.execute('''
                    INSERT OR REPLACE INTO messages 
                    (message_id, text, date, author, author_id_hash, channel_id, channel_name, 
                     message_type, media_type, media_url, reply_to, views, forwards, 
                     sentiment, keywords, language)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    msg.id, msg.text, msg.date, msg.author, msg.author_id,
                    msg.channel_id, msg.channel_name, msg.message_type,
                    msg.media_type, msg.media_url, msg.reply_to, msg.views,
                    msg.forwards, msg.sentiment, json.dumps(msg.keywords),
                    msg.language
                ))
            
            conn.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        finally:
            conn.close()
    
    async def parse_channel(self, config: ParseConfig) -> Dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: {config.target}")
        self.stats['start_time'] = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
        if not self.current_engine:
            if not await self.initialize_clients():
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã"}
        
        messages = []
        
        try:
            # –í—ã–±–æ—Ä –¥–≤–∏–∂–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            if self.current_engine == "pyrogram":
                messages = await self._parse_with_pyrogram(config)
            elif self.current_engine == "telethon":
                messages = await self._parse_with_telethon(config)
            else:
                return {"error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"}
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            if messages:
                await self._save_messages(messages)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats['channels_processed'] += 1
            
            result = {
                "success": True,
                "channel": config.target,
                "messages_parsed": len(messages),
                "engine_used": self.current_engine,
                "stats": self.stats.copy(),
                "messages_sample": [asdict(msg) for msg in messages[:5]]  # –ü–µ—Ä–≤—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            }
            
            logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {"error": str(e)}
    
    def export_data(self, format_type: str = "json", filename: str = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"telegram_export_{timestamp}.{format_type}"
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                SELECT * FROM messages 
                ORDER BY date DESC
            ''')
            
            columns = [description[0] for description in cursor.description]
            rows = cursor.fetchall()
            
            if format_type == "json":
                data = [dict(zip(columns, row)) for row in rows]
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2, default=str)
            
            elif format_type == "csv":
                import csv
                with open(filename, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow(columns)
                    writer.writerows(rows)
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
        finally:
            conn.close()
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(*) FROM messages")
            total_messages = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(DISTINCT channel_name) FROM messages")
            total_channels = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
            cursor.execute('''
                SELECT channel_name, COUNT(*) as message_count 
                FROM messages 
                GROUP BY channel_name 
                ORDER BY message_count DESC
            ''')
            channels_stats = cursor.fetchall()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            cursor.execute('''
                SELECT sentiment, COUNT(*) as count 
                FROM messages 
                WHERE sentiment IS NOT NULL 
                GROUP BY sentiment
            ''')
            sentiment_stats = cursor.fetchall()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º
            cursor.execute('''
                SELECT language, COUNT(*) as count 
                FROM messages 
                WHERE language IS NOT NULL 
                GROUP BY language 
                ORDER BY count DESC
            ''')
            language_stats = cursor.fetchall()
            
            return {
                "total_messages": total_messages,
                "total_channels": total_channels,
                "channels": dict(channels_stats),
                "sentiment": dict(sentiment_stats),
                "languages": dict(language_stats),
                "parsing_stats": self.stats
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
        finally:
            conn.close()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.pyrogram_client:
                await self.pyrogram_client.stop()
            if self.telethon_client:
                await self.telethon_client.disconnect()
            logger.info("üßπ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω FastAPI)
if WEB_AVAILABLE:
    app = FastAPI(title="Telegram Parser MVP", version="1.0.0")
    parser = TelegramParserMVP()
    
    class ParseRequest(BaseModel):
        target: str
        max_messages: int = 1000
        days_back: int = 7
        keywords: Optional[List[str]] = None
        exclude_keywords: Optional[List[str]] = None
        analyze_sentiment: bool = True
        extract_keywords: bool = True
    
    @app.get("/", response_class=HTMLResponse)
    async def dashboard():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>üïâÔ∏è Telegram Parser MVP</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { background: #2196F3; color: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; }
                .card { background: white; padding: 20px; border-radius: 10px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .form-group { margin-bottom: 15px; }
                label { display: block; margin-bottom: 5px; font-weight: bold; }
                input, textarea, select { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
                button { background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
                button:hover { background: #45a049; }
                .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
                .stat-card { background: #fff; padding: 20px; border-radius: 10px; text-align: center; }
                .stat-number { font-size: 2em; font-weight: bold; color: #2196F3; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üïâÔ∏è Telegram Parser MVP</h1>
                    <p>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø</p>
                </div>
                
                <div class="card">
                    <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                    <div class="stats">
                        <div class="stat-card">
                            <div class="stat-number" id="total-messages">0</div>
                            <div>–°–æ–æ–±—â–µ–Ω–∏–π</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="total-channels">0</div>
                            <div>–ö–∞–Ω–∞–ª–æ–≤</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="parsing-sessions">0</div>
                            <div>–°–µ—Å—Å–∏–π</div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h2>üöÄ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞</h2>
                    <form id="parse-form">
                        <div class="form-group">
                            <label for="target">–ö–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞:</label>
                            <input type="text" id="target" name="target" placeholder="@channel_name –∏–ª–∏ https://t.me/channel_name" required>
                        </div>
                        
                        <div class="form-group">
                            <label for="max_messages">–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π:</label>
                            <input type="number" id="max_messages" name="max_messages" value="1000" min="1" max="10000">
                        </div>
                        
                        <div class="form-group">
                            <label for="days_back">–î–Ω–µ–π –Ω–∞–∑–∞–¥:</label>
                            <input type="number" id="days_back" name="days_back" value="7" min="1" max="365">
                        </div>
                        
                        <div class="form-group">
                            <label for="keywords">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                            <input type="text" id="keywords" name="keywords" placeholder="–±–∏—Ç–∫–æ–∏–Ω, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, –±–ª–æ–∫—á–µ–π–Ω">
                        </div>
                        
                        <div class="form-group">
                            <label for="exclude_keywords">–ò—Å–∫–ª—é—á–∏—Ç—å —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                            <input type="text" id="exclude_keywords" name="exclude_keywords" placeholder="—Ä–µ–∫–ª–∞–º–∞, —Å–ø–∞–º">
                        </div>
                        
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="analyze_sentiment" name="analyze_sentiment" checked>
                                –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                            </label>
                        </div>
                        
                        <div class="form-group">
                            <label>
                                <input type="checkbox" id="extract_keywords" name="extract_keywords" checked>
                                –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                            </label>
                        </div>
                        
                        <button type="submit">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥</button>
                    </form>
                </div>
                
                <div class="card">
                    <h2>üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã</h2>
                    <div id="results"></div>
                </div>
            </div>
            
            <script>
                // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                async function loadStats() {
                    try {
                        const response = await fetch('/api/stats');
                        const stats = await response.json();
                        
                        document.getElementById('total-messages').textContent = stats.total_messages || 0;
                        document.getElementById('total-channels').textContent = stats.total_channels || 0;
                        document.getElementById('parsing-sessions').textContent = stats.parsing_stats?.channels_processed || 0;
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
                    }
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
                document.getElementById('parse-form').addEventListener('submit', async (e) => {
                    e.preventDefault();
                    
                    const formData = new FormData(e.target);
                    const data = {
                        target: formData.get('target'),
                        max_messages: parseInt(formData.get('max_messages')),
                        days_back: parseInt(formData.get('days_back')),
                        keywords: formData.get('keywords') ? formData.get('keywords').split(',').map(k => k.trim()) : null,
                        exclude_keywords: formData.get('exclude_keywords') ? formData.get('exclude_keywords').split(',').map(k => k.trim()) : null,
                        analyze_sentiment: formData.get('analyze_sentiment') === 'on',
                        extract_keywords: formData.get('extract_keywords') === 'on'
                    };
                    
                    const resultsDiv = document.getElementById('results');
                    resultsDiv.innerHTML = '<p>‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</p>';
                    
                    try {
                        const response = await fetch('/api/parse', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });
                        
                        const result = await response.json();
                        
                        if (result.success) {
                            resultsDiv.innerHTML = `
                                <h3>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!</h3>
                                <p><strong>–ö–∞–Ω–∞–ª:</strong> ${result.channel}</p>
                                <p><strong>–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</strong> ${result.messages_parsed}</p>
                                <p><strong>–î–≤–∏–∂–æ–∫:</strong> ${result.engine_used}</p>
                                <p><strong>–í—Ä–µ–º—è:</strong> ${new Date().toLocaleString()}</p>
                                <button onclick="downloadData()">üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
                            `;
                            loadStats(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                        } else {
                            resultsDiv.innerHTML = `<p style="color: red;">‚ùå –û—à–∏–±–∫–∞: ${result.error}</p>`;
                        }
                    } catch (error) {
                        resultsDiv.innerHTML = `<p style="color: red;">‚ùå –û—à–∏–±–∫–∞: ${error.message}</p>`;
                    }
                });
                
                // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                async function downloadData() {
                    window.open('/api/export?format=json', '_blank');
                }
                
                // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                loadStats();
            </script>
        </body>
        </html>
        """
        return html_content
    
    @app.post("/api/parse")
    async def parse_endpoint(request: ParseRequest, background_tasks: BackgroundTasks):
        """API endpoint –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            config = ParseConfig(
                target=request.target,
                max_messages=request.max_messages,
                days_back=request.days_back,
                keywords=request.keywords,
                exclude_keywords=request.exclude_keywords,
                analyze_sentiment=request.analyze_sentiment,
                extract_keywords=request.extract_keywords
            )
            
            # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ–Ω–µ
            result = await parser.parse_channel(config)
            return result
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/api/stats")
    async def get_stats():
        """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return parser.get_statistics()
    
    @app.get("/api/export")
    async def export_data_endpoint(format: str = "json"):
        """API endpoint –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        filename = parser.export_data(format)
        if filename:
            return {"filename": filename, "download_url": f"/download/{filename}"}
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")

# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI"""
    print("üïâÔ∏è Telegram Parser MVP - –ó–∞–ø—É—Å–∫ CLI —Ä–µ–∂–∏–º–∞")
    
    parser = TelegramParserMVP()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        if not await parser.initialize_clients():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—ã")
            return
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        target = input("–í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É (@channel_name): ").strip()
        if not target:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª")
            return
        
        max_messages = int(input("–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000): ") or "1000")
        days_back = int(input("–î–Ω–µ–π –Ω–∞–∑–∞–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7): ") or "7")
        
        keywords_input = input("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
        keywords = [k.strip() for k in keywords_input.split(",")] if keywords_input else None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = ParseConfig(
            target=target,
            max_messages=max_messages,
            days_back=days_back,
            keywords=keywords,
            analyze_sentiment=True,
            extract_keywords=True
        )
        
        # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        result = await parser.parse_channel(config)
        
        if result.get("success"):
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {result['messages_parsed']}")
            print(f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫: {result['engine_used']}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            export_choice = input("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ? (y/n): ").lower()
            if export_choice == 'y':
                format_choice = input("–§–æ—Ä–º–∞—Ç (json/csv): ").lower() or "json"
                filename = parser.export_data(format_choice)
                if filename:
                    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = parser.get_statistics()
            print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}")
            print(f"   –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {stats['total_channels']}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {result.get('error')}")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await parser.cleanup()

if __name__ == "__main__":
    if WEB_AVAILABLE:
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        print("–û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
        import uvicorn
        uvicorn.run(app, host="0.0.0.0", port=8000)
    else:
        print("üñ•Ô∏è –ó–∞–ø—É—Å–∫ CLI —Ä–µ–∂–∏–º–∞...")
        asyncio.run(main()) 