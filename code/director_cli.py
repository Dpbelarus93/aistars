#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üëî CORPORATE DIRECTOR CLI - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π
üè¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–∞–π–º–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""

import argparse
import json
import time
from datetime import datetime
from empire_agents import EmpireCorporation

def main():
    parser = argparse.ArgumentParser(
        description="üëî Corporate Director CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ EMPIRE AI Corporation",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üè¢ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏:
  python director_cli.py --analyze

üë• –ü–ª–∞–Ω –Ω–∞–π–º–∞ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:
  python director_cli.py --hiring-plan

‚ö° –£–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
  python director_cli.py --manage-project --domain "ai automation"

üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á:
  python director_cli.py --execute-tasks --tasks "task1,task2,task3"

üìà –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏:
  python director_cli.py --full-report

üëî –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –î–∏—Ä–µ–∫—Ç–æ—Ä–∞:
  python director_cli.py --demo
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--analyze', action='store_true',
                       help='üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏')
    
    parser.add_argument('--hiring-plan', action='store_true',
                       help='üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞–π–º–∞ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤')
    
    parser.add_argument('--manage-project', action='store_true',
                       help='‚ö° –£–ø—Ä–∞–≤–ª—è–µ–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
    
    parser.add_argument('--execute-tasks', action='store_true',
                       help='üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–¥–∞—á')
    
    parser.add_argument('--full-report', action='store_true',
                       help='üìà –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏')
    
    parser.add_argument('--demo', action='store_true',
                       help='üëî –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –î–∏—Ä–µ–∫—Ç–æ—Ä–∞')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--domain', type=str, default='general',
                       help='üéØ –û–±–ª–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (ai, automation, web, etc.)')
    
    parser.add_argument('--tasks', type=str,
                       help='üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    
    parser.add_argument('--output', type=str,
                       help='üíæ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    print("üëî" * 60)
    print("üè¢ CORPORATE DIRECTOR - –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–†–ü–û–†–ê–¶–ò–ï–ô")
    print("üëî" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏
    print("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EMPIRE AI Corporation...")
    corporation = EmpireCorporation()
    director = corporation.director
    
    print(f"‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {len(corporation.agents)} –∞–≥–µ–Ω—Ç–æ–≤ + –î–∏—Ä–µ–∫—Ç–æ—Ä")
    print()
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    if args.analyze or args.demo:
        print("üìä –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø –ö–û–†–ü–û–†–ê–¶–ò–ò")
        print("=" * 50)
        
        start_time = time.time()
        analysis = corporation.run_corporate_analysis()
        analysis_time = time.time() - start_time
        
        print(f"üë• –û–±—â–∏–π —à—Ç–∞—Ç: {analysis['total_agents']} –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {analysis['operational_efficiency']}%")
        print(f"üìà –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time:.2f}—Å")
        print()
        
        print("ü§ñ –¢–ï–ö–£–©–ò–ï –ê–ì–ï–ù–¢–´:")
        for agent_name, agent_info in analysis['current_agents'].items():
            efficiency = agent_info['efficiency_rating']
            specialization = agent_info['specialization']
            experience = agent_info['experience_points']
            
            print(f"  ‚Ä¢ {agent_name:<15} | {specialization:<20} | –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1%} | –û–ø—ã—Ç: {experience}")
        
        print()
        results['analysis'] = analysis
    
    if args.hiring_plan or args.demo:
        print("üë• –ü–õ–ê–ù –ù–ê–ô–ú–ê –ù–û–í–´–• –ê–ì–ï–ù–¢–û–í")
        print("=" * 50)
        
        analysis = corporation.run_corporate_analysis()
        hiring_plan = analysis['hiring_recommendations']
        
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–û–¢–†–ï–ë–ù–û–°–¢–ò (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ):")
        for need in hiring_plan['immediate_needs']:
            print(f"  ‚Ä¢ {need['role']:<25} | {need['skills'][0]:<20} | {need['estimated_cost']}")
        
        print("\nüìÖ –ö–†–ê–¢–ö–û–°–†–û–ß–ù–´–ï –ü–õ–ê–ù–´ (1-2 –º–µ—Å—è—Ü–∞):")
        for need in hiring_plan['short_term']:
            print(f"  ‚Ä¢ {need['role']:<25} | {need['skills'][0]:<20} | {need['estimated_cost']}")
        
        print("\nüîÆ –î–û–õ–ì–û–°–†–û–ß–ù–´–ï –ü–õ–ê–ù–´ (3-6 –º–µ—Å—è—Ü–µ–≤):")
        for need in hiring_plan['long_term']:
            print(f"  ‚Ä¢ {need['role']:<25} | {need['skills'][0]:<20} | {need['estimated_cost']}")
        
        print()
        results['hiring_plan'] = hiring_plan
    
    if args.manage_project or args.demo:
        print("‚ö° –£–ü–†–ê–í–õ–Ø–ï–ú–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê")
        print("=" * 50)
        
        project_requirements = {
            "name": f"AI Project in {args.domain}",
            "domain": args.domain,
            "technical_requirements": ["automation", "intelligence", "scalability"],
            "deadline": "normal",
            "innovation": "high"
        }
        
        print(f"üéØ –ü—Ä–æ–µ–∫—Ç: {project_requirements['name']}")
        print(f"üåê –û–±–ª–∞—Å—Ç—å: {args.domain}")
        
        start_time = time.time()
        managed_result = corporation.execute_managed_project(project_requirements)
        execution_time = time.time() - start_time
        
        director_result = managed_result['director_management']
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"  ‚Ä¢ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {director_result['successful_tasks']}/{director_result['total_tasks']}")
        print(f"  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {director_result['efficiency_score']:.1f}%")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å")
        print(f"  ‚Ä¢ –°—Ç–∞—Ç—É—Å: {managed_result['completion_status']}")
        
        if director_result['lessons_learned']:
            print("üìö –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏:")
            for lesson in director_result['lessons_learned']:
                print(f"  ‚Ä¢ {lesson}")
        
        print()
        results['managed_project'] = managed_result
    
    if args.execute_tasks:
        print("üéØ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ö–ê–°–¢–û–ú–ù–´–• –ó–ê–î–ê–ß")
        print("=" * 50)
        
        if args.tasks:
            task_names = [t.strip() for t in args.tasks.split(',')]
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
            custom_tasks = []
            for task_name in task_names:
                custom_tasks.append({
                    "name": task_name,
                    "type": "custom",
                    "domain": args.domain,
                    "required_skills": ["general"],
                    "priority": "medium"
                })
            
            print(f"üìã –í—ã–ø–æ–ª–Ω—è—é {len(custom_tasks)} –∑–∞–¥–∞—á:")
            for task in custom_tasks:
                print(f"  ‚Ä¢ {task['name']}")
            
            start_time = time.time()
            task_result = director.manage_task_execution(custom_tasks)
            execution_time = time.time() - start_time
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {task_result['successful_tasks']}/{task_result['total_tasks']}")
            print(f"  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {task_result['efficiency_score']:.1f}%") 
            print(f"  ‚Ä¢ –í—Ä–µ–º—è: {execution_time:.2f}—Å")
            
            results['custom_tasks'] = task_result
        else:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∑–∞–¥–∞—á–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --tasks \"task1,task2,task3\"")
    
    if args.full_report or args.demo:
        print("üìà –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –ö–û–†–ü–û–†–ê–¶–ò–ò")
        print("=" * 50)
        
        analysis = corporation.run_corporate_analysis()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {analysis['total_agents']}")
        print(f"  ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {analysis['operational_efficiency']}%")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–ø—ã—Ç –∞–≥–µ–Ω—Ç–æ–≤: {analysis['performance_metrics']['average_experience']:.1f}")
        print(f"  ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤: {analysis['performance_metrics']['total_skills']}")
        print(f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {analysis['performance_metrics']['learning_activity']}")
        
        # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–≤—ã–∫–∞—Ö
        skill_gaps = analysis['skill_gaps']
        critical_gaps = [gap for gap in skill_gaps if gap['priority'] >= 0.8]
        
        print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–ï–õ–´ –í –ù–ê–í–´–ö–ê–•: {len(critical_gaps)}")
        for gap in critical_gaps[:5]:  # –¢–æ–ø-5
            print(f"  ‚Ä¢ {gap['skill']:<25} | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {gap['priority']:.1%} | –¢–∏–ø –∞–≥–µ–Ω—Ç–∞: {gap['recommended_agent_type']}")
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        for improvement in analysis['areas_for_improvement']:
            print(f"  ‚Ä¢ {improvement}")
        
        print()
        results['full_report'] = analysis
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.output and results:
        with open(args.output, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
    
    print("\nüëî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 