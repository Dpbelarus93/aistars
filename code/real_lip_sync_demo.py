#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé¨ REAL LIP SYNC DEMO
–°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ + –∞—É–¥–∏–æ
"""

import subprocess
import shutil
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - üé¨ %(message)s')

class RealLipSyncDemo:
    """üé¨ –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ"""
    
    def __init__(self):
        self.workspace = Path("LIP_SYNC_WORKSPACE")
        self.photos = self.workspace / "input_photos"
        self.audio = self.workspace / "input_audio"
        self.output = self.workspace / "real_videos"
        
        self.output.mkdir(exist_ok=True)
        self.logger = logging.getLogger("RealLipSync")
    
    def check_ffmpeg(self):
        """üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg"""
        try:
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                self.logger.info("‚úÖ FFmpeg –Ω–∞–π–¥–µ–Ω")
                return True
            else:
                self.logger.error("‚ùå FFmpeg –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
        except FileNotFoundError:
            self.logger.error("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    
    def create_video(self, photo_path: Path, audio_path: Path, output_path: Path):
        """üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ + –∞—É–¥–∏–æ"""
        
        try:
            # FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
            cmd = [
                'ffmpeg', '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã
                '-loop', '1',    # –ó–∞—Ü–∏–∫–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                '-i', str(photo_path),  # –í—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ
                '-i', str(audio_path),  # –í—Ö–æ–¥–Ω–æ–µ –∞—É–¥–∏–æ
                '-c:v', 'libx264',      # –í–∏–¥–µ–æ –∫–æ–¥–µ–∫
                '-c:a', 'aac',          # –ê—É–¥–∏–æ –∫–æ–¥–µ–∫
                '-shortest',            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –∞—É–¥–∏–æ
                '-pix_fmt', 'yuv420p',  # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                '-vf', 'scale=720:720,zoompan=z=1.05:d=125', # –õ–µ–≥–∫–∏–π –∑—É–º
                str(output_path)
            ]
            
            self.logger.info(f"üé¨ –°–æ–∑–¥–∞—é: {output_path.name}")
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                self.logger.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {output_path.name}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr[:200]}...")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    def process_all(self):
        """üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π"""
        
        if not self.check_ffmpeg():
            self.logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg: brew install ffmpeg")
            return
        
        photos = list(self.photos.glob("*.jpg")) + list(self.photos.glob("*.png"))
        audios = list(self.audio.glob("*.wav"))
        
        self.logger.info(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: {len(photos)}")
        self.logger.info(f"üéµ –ù–∞–π–¥–µ–Ω–æ –∞—É–¥–∏–æ: {len(audios)}")
        
        created = 0
        total = min(len(photos), 5) * min(len(audios), 2)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for i, photo in enumerate(photos[:5]):  # –ü–µ—Ä–≤—ã–µ 5 —Ñ–æ—Ç–æ
            for j, audio in enumerate(audios[:2]):  # –ü–µ—Ä–≤—ã–µ 2 –∞—É–¥–∏–æ
                
                output_name = f"real_video_{i+1:02d}_{j+1}_{photo.stem}_{audio.stem}.mp4"
                output_path = self.output / output_name
                
                if self.create_video(photo, audio, output_path):
                    created += 1
                
                self.logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {created}/{total}")
        
        self.logger.info(f"üéâ –°–æ–∑–¥–∞–Ω–æ {created} –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≤–∏–¥–µ–æ!")
        return created

def main():
    print("üé¨" * 50)
    print("üé≠ REAL LIP SYNC DEMO")
    print("–°–æ–∑–¥–∞–µ–º –ù–ê–°–¢–û–Ø–©–ò–ï –≤–∏–¥–µ–æ!")
    print("üé¨" * 50)
    
    demo = RealLipSyncDemo()
    created = demo.process_all()
    
    if created > 0:
        print(f"\n‚úÖ –£—Å–ø–µ—Ö! –°–æ–∑–¥–∞–Ω–æ {created} –≤–∏–¥–µ–æ")
        print(f"üìÅ –ü–∞–ø–∫–∞: {demo.output}")
        print("üé¨ –≠—Ç–∏ –≤–∏–¥–µ–æ —Ç–æ—á–Ω–æ –æ—Ç–∫—Ä–æ—é—Ç—Å—è!")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg: brew install ffmpeg")

if __name__ == "__main__":
    main() 