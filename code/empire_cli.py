#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üè¢ EMPIRE AI CORPORATION - –ö–û–ú–ê–ù–î–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–°
üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–º–ø–µ—Ä–∏–µ–π –∞–≥–µ–Ω—Ç–æ–≤
üíª –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
"""

import argparse
import json
import os
import sys
import time
from pathlib import Path
from datetime import datetime
from empire_agents import EmpireCorporation

class EmpireCLI:
    """üëë –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–µ—Ä–∏–µ–π"""
    
    def __init__(self):
        self.empire = None
        self.workspace_path = Path("EMPIRE_WORKSPACE")
    
    def init_empire(self):
        """üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–º–ø–µ—Ä–∏–∏"""
        print("üëë" * 60)
        print("üè¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø EMPIRE AI CORPORATION")
        print("üëë" * 60)
        
        self.empire = EmpireCorporation()
        
        print("\nüöÄ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–ê–Ø –ò–ú–ü–ï–†–ò–Ø –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
        
        for agent_name, agent in self.empire.agents.items():
            print(f"  ü§ñ {agent_name}: {agent.role} ({agent.department})")
        
        return True
    
    def execute_project(self, project_file: str):
        """üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π"""
        
        if not self.empire:
            self.init_empire()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø—Ä–æ–µ–∫—Ç—É
        if Path(project_file).exists():
            with open(project_file, 'r', encoding='utf-8') as f:
                project_requirements = json.load(f)
        else:
            print(f"‚ùå –§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_file}")
            return
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_requirements.get('name', 'Unnamed')}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        result = self.empire.execute_project(project_requirements)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\n‚úÖ –ü–†–û–ï–ö–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìã ID: {result['project_id']}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result['completion_status']}")
        print(f"üëë –ö–æ–º–∞–Ω–¥–∞: {', '.join(result['strategy']['assigned_team'])}")
        print(f"üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['strategy']['complexity_level']}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.save_project_results(result)
    
    def research_domain(self, domain: str):
        """üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        
        if not self.empire:
            self.init_empire()
        
        print(f"üî¨ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –û–ë–õ–ê–°–¢–ò: {domain}")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        research_result = self.empire.agents["RESEARCH"].research_best_solutions(domain)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(research_result['top_solutions'])}")
        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {research_result['research_confidence']:.2f}")
        
        print("\nüîù –¢–û–ü-5 –†–ï–®–ï–ù–ò–ô:")
        for i, solution in enumerate(research_result['top_solutions'][:5], 1):
            print(f"  {i}. {solution.get('title', 'N/A')}")
            print(f"     üåü –†–µ–π—Ç–∏–Ω–≥: {solution.get('stars', 0)}")
            print(f"     üîó {solution.get('url', 'N/A')}")
            print()
        
        return research_result
    
    def mentor_session(self, junior_agent: str, task_type: str):
        """üéì –ú–µ–Ω—Ç–æ—Ä—Å–∫–∞—è —Å–µ—Å—Å–∏—è"""
        
        if not self.empire:
            self.init_empire()
        
        print(f"üéì –ú–ï–ù–¢–û–†–°–ö–ê–Ø –°–ï–°–°–ò–Ø")
        print(f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: {junior_agent}")
        print(f"üìö –¢–µ–º–∞: {task_type}")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞
        task = {
            "type": task_type,
            "domain": "programming",
            "complexity": "medium"
        }
        
        # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞
        guidance = self.empire.agents["SENIOR_DEV"].mentor_junior_agent(junior_agent, task)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ú–ï–ù–¢–û–†–ê:")
        for recommendation in guidance.get("approach_recommendations", []):
            print(f"  ‚Ä¢ {recommendation}")
        
        print("\nüìö BEST PRACTICES:")
        for practice in guidance.get("best_practices", []):
            print(f"  ‚úÖ {practice}")
        
        print("\nüìñ –†–ï–°–£–†–°–´ –î–õ–Ø –ò–ó–£–ß–ï–ù–ò–Ø:")
        for resource in guidance.get("learning_resources", []):
            print(f"  üìÑ {resource}")
        
        return guidance
    
    def learning_session(self):
        """üß† –°–µ—Å—Å–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        
        if not self.empire:
            self.init_empire()
        
        print("üß† –ö–û–†–ü–û–†–ê–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
        learning_result = self.empire.agents["LEARNING"].learn_from_corporate_experience()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {learning_result['data_points_analyzed']}")
        print(f"üéØ –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—Ö–∞ –Ω–∞–π–¥–µ–Ω–æ: {len(learning_result['success_patterns'])}")
        print(f"‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ—É–¥–∞—á –Ω–∞–π–¥–µ–Ω–æ: {len(learning_result['failure_patterns'])}")
        
        print("\n‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –ü–ê–¢–¢–ï–†–ù–´ –£–°–ü–ï–•–ê:")
        for pattern in learning_result['success_patterns'][:3]:
            print(f"  ‚Ä¢ {pattern}")
        
        print("\nüìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        for recommendation in learning_result['recommendations'][:3]:
            print(f"  üéØ {recommendation}")
        
        return learning_result
    
    def corporate_standup(self):
        """üìä –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π standup"""
        
        if not self.empire:
            self.init_empire()
        
        print("üìä DAILY STANDUP - EMPIRE AI CORPORATION")
        print("=" * 60)
        
        standup_data = self.empire.daily_standup()
        
        for agent_name, data in standup_data.items():
            print(f"\nü§ñ {agent_name}:")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"   ‚≠ê –û–ø—ã—Ç: {data['experience_points']} XP")
            print(f"   üéØ –ù–∞–≤—ã–∫–æ–≤: {len(data['current_skills'])}")
            
            if data['current_skills']:
                print("   üí™ –¢–æ–ø –Ω–∞–≤—ã–∫–∏:")
                sorted_skills = sorted(data['current_skills'].items(), key=lambda x: x[1], reverse=True)
                for skill, level in sorted_skills[:3]:
                    print(f"      ‚Ä¢ {skill}: {level:.2f}")
    
    def create_sample_project(self, project_name: str):
        """üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        sample_projects = {
            "ai_video": {
                "name": "AI Video Generator",
                "domain": "artificial intelligence",
                "technical_requirements": [
                    "video generation",
                    "AI integration",
                    "real-time processing",
                    "user interface",
                    "cloud deployment"
                ],
                "deadline": "normal",
                "innovation": "breakthrough",
                "resources": "high",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"
            },
            
            "crypto_bot": {
                "name": "Crypto Trading Bot",
                "domain": "financial technology",
                "technical_requirements": [
                    "real-time data processing",
                    "machine learning",
                    "API integration",
                    "risk management",
                    "backtesting"
                ],
                "deadline": "urgent",
                "innovation": "incremental",
                "resources": "medium",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏"
            },
            
            "social_media": {
                "name": "Social Media Manager",
                "domain": "social media automation",
                "technical_requirements": [
                    "content generation",
                    "scheduling",
                    "analytics",
                    "multi-platform",
                    "AI writing"
                ],
                "deadline": "normal",
                "innovation": "incremental",
                "resources": "standard",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏"
            }
        }
        
        if project_name in sample_projects:
            project = sample_projects[project_name]
            filename = f"project_{project_name}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(project, f, ensure_ascii=False, indent=2)
            
            print(f"üìã –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç: {filename}")
            print(f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {project['name']}")
            print(f"üéØ –û–ø–∏—Å–∞–Ω–∏–µ: {project['description']}")
            print(f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {len(project['technical_requirements'])} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
            
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã:")
            for name, project in sample_projects.items():
                print(f"  ‚Ä¢ {name}: {project['name']}")
    
    def monitor_empire(self):
        """üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–ø–µ—Ä–∏–∏"""
        
        if not self.empire:
            print("‚ùå –ò–º–ø–µ—Ä–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ --init-empire")
            return
        
        print("üëÅÔ∏è –ú–û–ù–ò–¢–û–†–ò–ù–ì EMPIRE AI CORPORATION")
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        
        try:
            while True:
                # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
                os.system('clear' if os.name == 'posix' else 'cls')
                
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                print("üëë EMPIRE AI CORPORATION - LIVE MONITOR")
                print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')}")
                print("=" * 60)
                
                # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
                standup_data = self.empire.daily_standup()
                
                print("ü§ñ –°–¢–ê–¢–£–° –ê–ì–ï–ù–¢–û–í:")
                for agent_name, data in standup_data.items():
                    status_emoji = {"idle": "üò¥", "processing": "‚ö°", "completed": "‚úÖ"}
                    emoji = status_emoji.get(data['status'], "‚ùì")
                    
                    print(f"  {emoji} {agent_name}: {data['status']} | XP: {data['experience_points']} | –ù–∞–≤—ã–∫–æ–≤: {len(data['current_skills'])}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
                print(f"\nüìÅ –†–ê–ë–û–ß–ï–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û:")
                if self.workspace_path.exists():
                    departments = [d for d in self.workspace_path.iterdir() if d.is_dir()]
                    print(f"  üìÇ –û—Ç–¥–µ–ª–æ–≤: {len(departments)}")
                    for dept in departments:
                        agents = [a for a in dept.iterdir() if a.is_dir()]
                        print(f"    ‚Ä¢ {dept.name}: {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤")
                
                # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
                kb_file = Path("empire_knowledge.db")
                if kb_file.exists():
                    size = kb_file.stat().st_size / 1024  # KB
                    print(f"\nüß† –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô: {size:.1f} KB")
                
                print("\n" + "=" * 60)
                time.sleep(5)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def save_project_results(self, result: dict):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        
        results_dir = Path("project_results")
        results_dir.mkdir(exist_ok=True)
        
        filename = f"result_{result['project_id']}.json"
        filepath = results_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
    
    def show_empire_stats(self):
        """üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–µ—Ä–∏–∏"""
        
        if not self.empire:
            print("‚ùå –ò–º–ø–µ—Ä–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê EMPIRE AI CORPORATION")
        print("=" * 60)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_xp = sum(agent.experience_points for agent in self.empire.agents.values())
        total_skills = sum(len(agent.skills) for agent in self.empire.agents.values())
        
        print(f"üè¢ –ê–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏: {len(self.empire.agents)}")
        print(f"‚≠ê –û–±—â–∏–π –æ–ø—ã—Ç: {total_xp} XP")
        print(f"üéØ –û–±—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤: {total_skills}")
        
        # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –æ–ø—ã—Ç—É
        print("\nüèÜ –¢–û–ü –ê–ì–ï–ù–¢–û–í –ü–û –û–ü–´–¢–£:")
        sorted_agents = sorted(
            self.empire.agents.items(), 
            key=lambda x: x[1].experience_points, 
            reverse=True
        )
        
        for i, (name, agent) in enumerate(sorted_agents[:3], 1):
            print(f"  {i}. {name}: {agent.experience_points} XP ({agent.role})")
        
        # –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        kb_file = Path("empire_knowledge.db")
        if kb_file.exists():
            size = kb_file.stat().st_size / 1024
            print(f"\nüß† –†–∞–∑–º–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {size:.1f} KB")
            modified = datetime.fromtimestamp(kb_file.stat().st_mtime)
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {modified.strftime('%Y-%m-%d %H:%M')}")

def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    parser = argparse.ArgumentParser(
        description="üëë Empire AI Corporation - –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üëë –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏
python empire_cli.py --init-empire

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
python empire_cli.py --create-project ai_video
python empire_cli.py --execute-project project_ai_video.json

# –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
python empire_cli.py --research "machine learning"

# –ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ
python empire_cli.py --mentor junior_dev_001 --task python_optimization

# –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
python empire_cli.py --learning-session

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
python empire_cli.py --monitor

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
python empire_cli.py --stats
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument("--init-empire", action="store_true",
                       help="üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–º–ø–µ—Ä–∏–∏")
    
    parser.add_argument("--execute-project", metavar="FILE",
                       help="üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞")
    
    parser.add_argument("--research", metavar="DOMAIN",
                       help="üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
    
    parser.add_argument("--mentor", metavar="AGENT",
                       help="üéì –ú–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–∞")
    
    parser.add_argument("--task", metavar="TYPE",
                       help="üìö –¢–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞")
    
    parser.add_argument("--learning-session", action="store_true",
                       help="üß† –°–µ—Å—Å–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    
    parser.add_argument("--standup", action="store_true",
                       help="üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π standup")
    
    parser.add_argument("--monitor", action="store_true",
                       help="üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–º–ø–µ—Ä–∏–∏")
    
    parser.add_argument("--stats", action="store_true",
                       help="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–µ—Ä–∏–∏")
    
    parser.add_argument("--create-project", metavar="TYPE",
                       help="üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (ai_video, crypto_bot, social_media)")
    
    args = parser.parse_args()
    
    cli = EmpireCLI()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if args.init_empire:
        cli.init_empire()
    
    elif args.execute_project:
        cli.execute_project(args.execute_project)
    
    elif args.research:
        cli.research_domain(args.research)
    
    elif args.mentor and args.task:
        cli.mentor_session(args.mentor, args.task)
    
    elif args.mentor:
        print("‚ùå –î–ª—è –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ —É–∫–∞–∂–∏—Ç–µ --task")
    
    elif args.learning_session:
        cli.learning_session()
    
    elif args.standup:
        cli.corporate_standup()
    
    elif args.monitor:
        cli.monitor_empire()
    
    elif args.stats:
        cli.show_empire_stats()
    
    elif args.create_project:
        cli.create_sample_project(args.create_project)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 