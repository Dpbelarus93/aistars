#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Quick Video Pipeline
–ë—ã—Å—Ç—Ä—ã–π –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ

–®–∞–≥–∏:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DaVinci Resolve API
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤ DaVinci
4. –°–æ–∑–¥–∞–Ω–∏–µ timeline
5. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ OpenCV
"""

import os
import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É —Å –∫–æ–¥–æ–º –≤ PATH
sys.path.insert(0, str(Path(__file__).parent / "Python –∫–æ–¥"))

def check_upscaled_images():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üì∏ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    upscaled_dir = Path("upscaled_images")
    if not upscaled_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ upscaled_images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    png_files = list(upscaled_dir.glob("upscaled__*.png"))
    if not png_files:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ PNG —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(png_files)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return True

def setup_davinci():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è DaVinci Resolve"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DaVinci Resolve API...")
    
    try:
        from setup_davinci_env import setup_davinci_environment
        return setup_davinci_environment()
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å setup_davinci_env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

def launch_davinci_import():
    """–ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤ DaVinci Resolve"""
    print("üé¨ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –≤ DaVinci Resolve...")
    
    try:
        from davinci_auto_import import DaVinciAutoImporter
        
        importer = DaVinciAutoImporter()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        success = importer.import_image_sequence(
            image_folder="upscaled_images",
            timeline_name="AI_Generated_Scene",
            fps=24
        )
        
        if success:
            print("‚úÖ Timeline —Å–æ–∑–¥–∞–Ω –≤ DaVinci Resolve!")
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∞–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç
            export_choice = input("\nü§î –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ")
            if export_choice.lower() in ['y', 'yes', '–¥–∞']:
                output_dir = Path("final_video")
                output_dir.mkdir(exist_ok=True)
                output_file = output_dir / "ai_generated_video.mp4"
                
                return importer.export_timeline(output_file)
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å timeline")
            return False
            
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å DaVinci: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DaVinci: {e}")
        return False

def run_opencv_processing():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenCV"""
    print("üé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenCV...")
    
    try:
        from create_video_opencv import create_video_from_images
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
        input_dir = Path("upscaled_images")
        output_dir = Path("final_video")
        output_dir.mkdir(exist_ok=True)
        output_file = output_dir / "ai_video_opencv.mp4"
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
        success = create_video_from_images(
            input_dir=input_dir,
            output_path=output_file,
            fps=24,
            codec='mp4v'
        )
        
        if success:
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_file}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ OpenCV")
            return False
            
    except ImportError as e:
        print(f"‚ùå OpenCV –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install opencv-python")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

def run_ffmpeg_processing():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ FFmpeg –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("üé• –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ FFmpeg...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FFmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        upscaled_dir = Path("upscaled_images")
        output_dir = Path("final_video")
        output_dir.mkdir(exist_ok=True)
        
        output_file = output_dir / "ai_video_ffmpeg.mp4"
        
        # FFmpeg –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        ffmpeg_cmd = [
            "ffmpeg", "-y",
            "-framerate", "24",
            "-i", str(upscaled_dir / "upscaled__%05d_.png"),
            "-c:v", "libx264",
            "-pix_fmt", "yuv420p",
            "-crf", "18",
            str(output_file)
        ]
        
        print(f"üîÑ –ó–∞–ø—É—Å–∫ FFmpeg...")
        
        result = subprocess.run(ffmpeg_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {output_file}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ FFmpeg: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Quick Video Pipeline")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not check_upscaled_images():
        print("\n‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ upscaler —Å–∫—Ä–∏–ø—Ç–æ–≤")
        return False
    
    # –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DaVinci
    print("\n" + "=" * 50)
    davinci_available = setup_davinci()
    
    if davinci_available:
        print("\nüé¨ DaVinci Resolve –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
        davinci_success = False
        try:
            davinci_success = launch_davinci_import()
            if davinci_success:
                print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print("üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –≤ DaVinci Resolve!")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ DaVinci –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
        
        # –ï—Å–ª–∏ DaVinci –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º
        if not davinci_success:
            davinci_available = False
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    if not davinci_available:
        print("\n‚ö†Ô∏è  DaVinci Resolve –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üé• –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenCV
        print("\nüìÑ –ü–æ–ø—ã—Ç–∫–∞ 1: OpenCV")
        if run_opencv_processing():
            print("\n‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ OpenCV!")
            return True
        
        # –ü–æ—Ç–æ–º FFmpeg –µ—Å–ª–∏ –µ—Å—Ç—å
        print("\nüìÑ –ü–æ–ø—ã—Ç–∫–∞ 2: FFmpeg")
        ffmpeg_choice = input("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å FFmpeg? (y/n): ")
        if ffmpeg_choice.lower() in ['y', 'yes', '–¥–∞']:
            if run_ffmpeg_processing():
                print("\n‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ FFmpeg!")
                return True
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ DaVinci Resolve")
        print("2. –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenCV: pip install opencv-python")
        print("3. –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg")
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\nüéâ –ì–û–¢–û–í–û! –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!")
    else:
        print("\n‚ùå –ü–∞–π–ø–ª–∞–π–Ω –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
        sys.exit(1) 