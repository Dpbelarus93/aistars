#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ HEYGEN API AUTOMATOR - –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø
============================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –≤ HeyGen, –∏—Å–ø–æ–ª—å–∑—É—è API.

–í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞–ø—Ä—è–º—É—é. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
–∑–∞—Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ Photo Avatars –∏ –∞—É–¥–∏–æ, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ URL.

–ê–≤—Ç–æ—Ä: AI Assistant (–î–∂–∏–º–º–∏)
–î–∞—Ç–∞: 2025-01-07
"""

import os
import time
import requests
import json
from pathlib import Path

# --- ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò - –ó–ê–ü–û–õ–ù–ò–¢–ï –í–†–£–ß–ù–£–Æ ‚öôÔ∏è ---

# 1. –í–∞—à API –∫–ª—é—á –∏–∑ HeyGen (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> Subscriptions -> HeyGen API)
HEYGEN_API_KEY = "YOUR_HEYGEN_API_KEY_HERE"

# 2. ID –≤–∞—à–∏—Ö Photo Avatars (–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ HeyGen –∏ –ø–æ–ª—É—á–∏—Ç—å ID)
#    –ó–∞–º–µ–Ω–∏—Ç–µ 'photo_name.jpg' –Ω–∞ –∏–º—è —Ñ–∞–π–ª–∞, –∞ 'avatar_id_goes_here' –Ω–∞ ID –∏–∑ HeyGen
AVATAR_IDS = {
    "photo_01_2025-05-27 00.17.18.jpg": "avatar_id_goes_here",
    "photo_02_2025-05-27 02.27.10.jpg": "avatar_id_goes_here",
    "photo_03_2025-05-26 17.52.42.jpg": "avatar_id_goes_here",
    "photo_04_2025-05-27 01.30.37.jpg": "avatar_id_goes_here",
    "photo_05_2025-05-24 23.48.19.jpg": "avatar_id_goes_here",
    "photo_06_upscaled__00006_.png": "avatar_id_goes_here",
    "photo_08_upscaled__00013_.png": "avatar_id_goes_here",
    "photo_09_upscaled__00070_.png": "avatar_id_goes_here",
    "photo_10_upscaled__00078_.png": "avatar_id_goes_here",
}

# 3. URL, –≥–¥–µ –±—É–¥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã.
#    –í–ê–ñ–ù–û: –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø—É–±–ª–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–µ!
#    –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –Ω–∞ Amazon S3, Google Cloud Storage
#    –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç–∏–Ω–≥.
#    –ü—Ä–∏–º–µ—Ä: "https://your-temp-storage.com/audio/"
BASE_AUDIO_URL = "YOUR_PUBLIC_AUDIO_URL_HERE" 

# ----------------------------------------------------

API_BASE_URL = "https://api.heygen.com"
HEADERS = {
    "X-Api-Key": HEYGEN_API_KEY,
    "Content-Type": "application/json"
}

def generate_video(mix_info):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ HeyGen.
    """
    avatar_id = AVATAR_IDS.get(mix_info["photo"])
    if not avatar_id or "avatar_id_goes_here" in avatar_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω Avatar ID –¥–ª—è —Ñ–æ—Ç–æ {mix_info['photo']}")
        return None, f"Avatar ID not configured for {mix_info['photo']}"

    audio_url = f"{BASE_AUDIO_URL.rstrip('/')}/{mix_info['audio']}"
    
    payload = {
        "video_inputs": [
            {
                "character": {
                    "type": "avatar",
                    "avatar_id": avatar_id,
                },
                "voice": {
                    "type": "audio",
                    "audio_url": audio_url
                }
            }
        ],
        "test": True,  # –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ (–æ–±—ã—á–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç –∫—Ä–µ–¥–∏—Ç—ã)
        "dimension": {
            "width": 1080,
            "height": 1920 # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
        }
    }

    try:
        response = requests.post(f"{API_BASE_URL}/v2/video/generate", headers=HEADERS, json=payload)
        response.raise_for_status()
        data = response.json()
        if data.get("error"):
            return None, data["error"]["message"]
        
        video_id = data["data"]["video_id"]
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Mix ID: {mix_info['id']}, Video ID: {video_id}")
        return video_id, None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None, str(e)


def check_video_status(video_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
    """
    status_url = f"{API_BASE_URL}/v1/video_status.get?video_id={video_id}"
    
    while True:
        try:
            response = requests.get(status_url, headers={"X-Api-Key": HEYGEN_API_KEY})
            response.raise_for_status()
            data = response.json().get("data", {})
            status = data.get("status")

            if status == "completed":
                print(f"‚úÖ –í–∏–¥–µ–æ {video_id} –≥–æ—Ç–æ–≤–æ! –°–∫–∞—á–∏–≤–∞—é...")
                video_url = data.get("video_url")
                if video_url:
                    video_content = requests.get(video_url).content
                    return video_content, None
                else:
                    return None, "Video URL not found in completed status."
            elif status in ("processing", "pending"):
                print(f"‚è≥ –í–∏–¥–µ–æ {video_id} –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –°—Ç–∞—Ç—É—Å: {status}. –ñ–¥—É 15 —Å–µ–∫—É–Ω–¥...")
                time.sleep(15)
            elif status == "failed":
                error_message = data.get("error", {}).get("message", "Unknown error")
                print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ {video_id} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –û—à–∏–±–∫–∞: {error_message}")
                return None, error_message
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å {status} –¥–ª—è –≤–∏–¥–µ–æ {video_id}.")
                time.sleep(15)
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return None, str(e)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è 20 –≤–∏–¥–µ–æ.
    """
    if "YOUR_HEYGEN_API_KEY_HERE" in HEYGEN_API_KEY or "YOUR_PUBLIC_AUDIO_URL_HERE" in BASE_AUDIO_URL:
        print("üõë –û–°–¢–ê–ù–û–í–ö–ê: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à HEYGEN_API_KEY –∏ BASE_AUDIO_URL –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–∫—Ä–∏–ø—Ç–∞.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω –∏–∑ HEYGEN_READY_BATCH
    report_path = Path("HEYGEN_READY_BATCH/BATCH_REPORT.json")
    if not report_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞: {report_path}")
        return
        
    with open(report_path, 'r', encoding='utf-8') as f:
        report_data = json.load(f)

    mix_plan = [
        {"id": mix["mix_id"], "audio": Path(mix["audio"]).name, "photo": Path(mix["photo"]).name}
        for mix in report_data.get("results", []) if mix["status"] == "ready"
    ]

    output_dir = Path("HEYGEN_API_RESULTS")
    output_dir.mkdir(exist_ok=True)
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {len(mix_plan)} –≤–∏–¥–µ–æ...")
    print("=" * 60)
    
    for mix in mix_plan:
        print(f"\n--- –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ Mix #{mix['id']} ---")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        video_id, error = generate_video(mix)
        if error:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è Mix #{mix['id']}. –ü—Ä–∏—á–∏–Ω–∞: {error}")
            continue
            
        # 2. –ñ–¥–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_data, error = check_video_status(video_id)
        if error:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è Mix #{mix['id']}. –ü—Ä–∏—á–∏–Ω–∞: {error}")
            continue
            
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_file = output_dir / f"heygen_result_{mix['id']:02d}.mp4"
        with open(output_file, 'wb') as f:
            f.write(video_data)
        print(f"üíæ –í–∏–¥–µ–æ –¥–ª—è Mix #{mix['id']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_file}")
        
    print("\n" + "=" * 60)
    print("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    print(f"üìÇ –ì–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: {output_dir}")


if __name__ == "__main__":
    main() 