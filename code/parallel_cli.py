#!/usr/bin/env python3 
# -*- coding: utf-8 -*-

"""
üî• –ö–û–ú–ê–ù–î–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ê–ì–ï–ù–¢–û–í
üíª –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import argparse
import json
import os
import sys
from pathlib import Path
from parallel_task_manager import ParallelTaskManager
import time

class ParallelCLI:
    """üíª –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.manager = None
        self.workspace_path = Path("PARALLEL_WORKSPACE")
    
    def init_system(self):
        """üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        print("üî•" * 50)
        print("ü§ñ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ê–ì–ï–ù–¢–û–í")
        print("üî•" * 50)
        
        self.manager = ParallelTaskManager()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents = ["video", "audio", "ai_generation", "analysis"]
        for agent_type in agents:
            self.manager.create_agent(agent_type)
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {agent_type} —Å–æ–∑–¥–∞–Ω")
        
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    
    def assign_video_task(self, task_type, input_path, **kwargs):
        """üé¨ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∑–∞–¥–∞—á–∏"""
        
        if not self.manager:
            self.init_system()
        
        task_data = {
            "input": input_path,
            **kwargs
        }
        
        self.manager.assign_task(task_type, task_data)
        print(f"‚úÖ –í–∏–¥–µ–æ–∑–∞–¥–∞—á–∞ '{task_type}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
        print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
    
    def assign_audio_task(self, task_type, input_path, **kwargs):
        """üéµ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–∑–∞–¥–∞—á–∏"""
        
        if not self.manager:
            self.init_system()
        
        task_data = {
            "input": input_path,
            **kwargs
        }
        
        self.manager.assign_task(task_type, task_data)
        print(f"‚úÖ –ê—É–¥–∏–æ–∑–∞–¥–∞—á–∞ '{task_type}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
        print(f"üìÅ –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_path}")
    
    def assign_ai_task(self, task_type, prompt, **kwargs):
        """ü§ñ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ AI –∑–∞–¥–∞—á–∏"""
        
        if not self.manager:
            self.init_system()
        
        task_data = {
            "prompt": prompt,
            **kwargs
        }
        
        self.manager.assign_task(task_type, task_data)
        print(f"‚úÖ AI –∑–∞–¥–∞—á–∞ '{task_type}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
        print(f"üí¨ –ü—Ä–æ–º–ø—Ç: {prompt}")
    
    def batch_assign_tasks(self, tasks_file):
        """üìã –ü–∞–∫–µ—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞"""
        
        if not self.manager:
            self.init_system()
        
        if not Path(tasks_file).exists():
            print(f"‚ùå –§–∞–π–ª —Å –∑–∞–¥–∞—á–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {tasks_file}")
            return
        
        with open(tasks_file, 'r', encoding='utf-8') as f:
            tasks = json.load(f)
        
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –∏–∑ {tasks_file}")
        
        for i, task in enumerate(tasks, 1):
            task_type = task.get("type")
            task_data = task.get("data", {})
            priority = task.get("priority", "medium")
            
            self.manager.assign_task(task_type, task_data, priority)
            print(f"‚úÖ –ó–∞–¥–∞—á–∞ {i}/{len(tasks)}: {task_type} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
        
        print("üöÄ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã!")
    
    def monitor_dashboard(self, refresh_interval=5):
        """üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞—à–±–æ—Ä–¥–∞"""
        
        if not self.manager:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ --init-system")
            return
        
        print("üìä –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while True:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
                system_info = self.get_system_status()
                
                # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
                os.system('clear' if os.name == 'posix' else 'cls')
                
                # –í—ã–≤–æ–¥ –¥–∞—à–±–æ—Ä–¥–∞
                self.print_status_dashboard(system_info)
                
                time.sleep(refresh_interval)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_system_status(self):
        """üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        status_file = self.workspace_path / "TASK_MANAGER" / "system_status.json"
        
        if status_file.exists():
            with open(status_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        else:
            return {"error": "–°—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    def print_status_dashboard(self, system_info):
        """üñ•Ô∏è –í—ã–≤–æ–¥ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        
        print("üî•" * 60)
        print("ü§ñ PARALLEL AGENTS DASHBOARD")
        print("üî•" * 60)
        
        if "error" in system_info:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return
        
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {system_info.get('timestamp', 'N/A')}")
        print()
        
        # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
        agents_status = system_info.get("agents_status", {})
        print("ü§ñ –ê–ì–ï–ù–¢–´:")
        
        if not agents_status:
            print("  üò¥ –ê–≥–µ–Ω—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã")
        else:
            for agent_id, status in agents_status.items():
                status_emoji = {
                    "idle": "üò¥", 
                    "processing": "‚ö°", 
                    "completed": "‚úÖ", 
                    "error": "‚ùå"
                }
                emoji = status_emoji.get(status.get("status"), "‚ùì")
                progress = status.get("progress", 0)
                load = status.get("load", 0)
                
                print(f"  {emoji} {agent_id}")
                print(f"     –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
                print(f"     –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%")
                print(f"     –ù–∞–≥—Ä—É–∑–∫–∞: {load}")
                print()
        
        # –†–µ—Å—É—Ä—Å—ã —Å–∏—Å—Ç–µ–º—ã
        resources = system_info.get("system_resources", {})
        print("üíª –†–ï–°–£–†–°–´ –°–ò–°–¢–ï–ú–´:")
        print(f"  üî• CPU: {resources.get('cpu_percent', 'N/A')}%")
        print(f"  üß† Memory: {resources.get('memory_percent', 'N/A')}%")
        print(f"  üíæ Disk: {resources.get('disk_usage', 'N/A')}%")
        print(f"  üéÆ GPU: {'‚úÖ' if resources.get('gpu_available') else '‚ùå'}")
        print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        queue_size = system_info.get("task_queue_size", 0)
        completed = system_info.get("completed_tasks", 0)
        
        print("üìä –ó–ê–î–ê–ß–ò:")
        print(f"  üìã –í –æ—á–µ—Ä–µ–¥–∏: {queue_size}")
        print(f"  ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}")
        print()
        print("üî•" * 60)
    
    def sync_results(self):
        """üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        if not self.manager:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        print("üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        self.manager.sync_all_results()
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        desktop_path = Path.home() / "Desktop" / "PARALLEL_RESULTS"
        final_output = self.workspace_path / "FINAL_OUTPUT"
        
        if final_output.exists():
            import shutil
            if desktop_path.exists():
                shutil.rmtree(desktop_path)
            shutil.copytree(final_output, desktop_path)
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª: {desktop_path}")
    
    def list_agents(self):
        """üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        
        status_file = self.workspace_path / "TASK_MANAGER" / "system_status.json"
        
        if not status_file.exists():
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(status_file, 'r', encoding='utf-8') as f:
            system_info = json.load(f)
        
        agents_status = system_info.get("agents_status", {})
        
        print("ü§ñ –ê–ö–¢–ò–í–ù–´–ï –ê–ì–ï–ù–¢–´:")
        print("-" * 50)
        
        for agent_id, status in agents_status.items():
            print(f"ü§ñ {agent_id}")
            print(f"   –°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {status.get('progress', 0)}%")
            print(f"   –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞: {status.get('current_task', 'None')}")
            print()
    
    def stop_system(self):
        """üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        if self.manager:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
            self.manager.sync_all_results()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")

def create_sample_tasks_file():
    """üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏"""
    
    sample_tasks = [
        {
            "type": "video_upscaling",
            "data": {"input": "video1.mp4", "target_resolution": "4K"},
            "priority": "high"
        },
        {
            "type": "audio_separation", 
            "data": {"input": "track1.mp3", "output_format": "wav"},
            "priority": "medium"
        },
        {
            "type": "image_generation",
            "data": {"prompt": "Ultra-realistic AI rapper character"},
            "priority": "medium"
        },
        {
            "type": "trend_analysis",
            "data": {"keywords": ["AI", "music", "video"]},
            "priority": "low"
        }
    ]
    
    with open("sample_tasks.json", 'w', encoding='utf-8') as f:
        json.dump(sample_tasks, f, ensure_ascii=False, indent=2)
    
    print("üìã –§–∞–π–ª sample_tasks.json —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á")

def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    
    parser = argparse.ArgumentParser(
        description="üî• –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ - CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üî• –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
python parallel_cli.py --init-system

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ –∑–∞–¥–∞—á
python parallel_cli.py --video-upscale input.mp4
python parallel_cli.py --video-convert input.mp4 --format mp4

# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–¥–∞—á  
python parallel_cli.py --audio-separate track.mp3
python parallel_cli.py --audio-enhance track.wav

# AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
python parallel_cli.py --ai-image "Ultra-realistic rapper"
python parallel_cli.py --ai-video "Music video scene"

# –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
python parallel_cli.py --batch-tasks sample_tasks.json

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
python parallel_cli.py --monitor

# –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
python parallel_cli.py --sync-results
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument("--init-system", action="store_true", 
                       help="üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    parser.add_argument("--monitor", action="store_true",
                       help="üìä –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    parser.add_argument("--sync-results", action="store_true",
                       help="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    parser.add_argument("--list-agents", action="store_true",
                       help="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    
    parser.add_argument("--stop-system", action="store_true",
                       help="üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    # –í–∏–¥–µ–æ –∑–∞–¥–∞—á–∏
    parser.add_argument("--video-upscale", metavar="FILE",
                       help="üé¨ –ê–ø—Å–∫–µ–π–ª–∏–Ω–≥ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
    
    parser.add_argument("--video-convert", metavar="FILE",
                       help="üé¨ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
    
    parser.add_argument("--video-compress", metavar="FILE", 
                       help="üé¨ –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞")
    
    # –ê—É–¥–∏–æ –∑–∞–¥–∞—á–∏
    parser.add_argument("--audio-separate", metavar="FILE",
                       help="üéµ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
    
    parser.add_argument("--audio-enhance", metavar="FILE",
                       help="üéµ –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ")
    
    parser.add_argument("--audio-cut", metavar="FILE",
                       help="üéµ –ù–∞—Ä–µ–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
    
    # AI –∑–∞–¥–∞—á–∏
    parser.add_argument("--ai-image", metavar="PROMPT",
                       help="ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø—Ä–æ–º–ø—Ç—É")
    
    parser.add_argument("--ai-video", metavar="PROMPT", 
                       help="ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –ø–æ –ø—Ä–æ–º–ø—Ç—É")
    
    parser.add_argument("--ai-lipsync", metavar="PROMPT",
                       help="ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ lip-sync –≤–∏–¥–µ–æ")
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    parser.add_argument("--batch-tasks", metavar="FILE",
                       help="üìã –ü–∞–∫–µ—Ç–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–∞")
    
    parser.add_argument("--create-sample", action="store_true",
                       help="üìã –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –∑–∞–¥–∞—á–∞–º–∏")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument("--format", metavar="FORMAT",
                       help="üîß –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    
    parser.add_argument("--quality", metavar="QUALITY",
                       help="üîß –ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    cli = ParallelCLI()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if args.init_system:
        cli.init_system()
    
    elif args.monitor:
        cli.monitor_dashboard()
    
    elif args.sync_results:
        cli.sync_results()
    
    elif args.list_agents:
        cli.list_agents()
    
    elif args.stop_system:
        cli.stop_system()
    
    elif args.create_sample:
        create_sample_tasks_file()
    
    # –í–∏–¥–µ–æ –∑–∞–¥–∞—á–∏
    elif args.video_upscale:
        cli.assign_video_task("video_upscaling", args.video_upscale)
    
    elif args.video_convert:
        format_type = args.format or "mp4"
        cli.assign_video_task("video_conversion", args.video_convert, format=format_type)
    
    elif args.video_compress:
        quality = args.quality or "medium"
        cli.assign_video_task("video_compression", args.video_compress, quality=quality)
    
    # –ê—É–¥–∏–æ –∑–∞–¥–∞—á–∏
    elif args.audio_separate:
        cli.assign_audio_task("audio_separation", args.audio_separate)
    
    elif args.audio_enhance:
        cli.assign_audio_task("audio_enhancement", args.audio_enhance)
    
    elif args.audio_cut:
        cli.assign_audio_task("audio_cutting", args.audio_cut)
    
    # AI –∑–∞–¥–∞—á–∏
    elif args.ai_image:
        cli.assign_ai_task("image_generation", args.ai_image)
    
    elif args.ai_video:
        cli.assign_ai_task("video_generation", args.ai_video)
    
    elif args.ai_lipsync:
        cli.assign_ai_task("lip_sync", args.ai_lipsync)
    
    # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    elif args.batch_tasks:
        cli.batch_assign_tasks(args.batch_tasks)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 